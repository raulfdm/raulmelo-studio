---
import { type SupportedLanguages } from '@raulmelo/core/config';
import { queryPostBySlug } from '@raulmelo/core/domains';
import { getEstimatedReadingTime, isEmpty, isNil } from '@raulmelo/core/utils';
import { DotDivider, ProseContainer } from '@raulmelo/ui';

import { getIntl } from '@/infrastructure/i18n/getServerSideLocales.server';
import { sanityClient } from '@/infrastructure/sanity/client';
import { getTagUrl } from '@/infrastructure/utils/url';
import PostLayout from '@/ui/layouts/PostLayout.astro';
import { PortableText } from '@/ui/PortableText';
import PostHeading from '@/ui/PostHeading.astro';
import { ShareContent } from '@/ui/ShareContent';
import { Tag, Tags } from '@/ui/Tags';

import FeaturedImage from './_ui/FeaturedImage.astro';
import SeriesSection from './_ui/SeriesSection.svelte';

const { lang, slug } = Astro.params as {
  slug: string;
  lang: SupportedLanguages;
};

const post = await queryPostBySlug({
  slug,
  client: sanityClient,
  preview: Astro.url.searchParams.get(`preview`) !== null,
});

if (post === null || isNil(post) || isEmpty(post)) {
  return Astro.redirect(`/404`);
}

const estimatedReadingTime = getEstimatedReadingTime(post.content);

const intl = getIntl(lang);
---

<PostLayout
  contentId={post._id}
  title={post.title}
  seo={{
    /**
     * This enforce parsing double quotes correctly.
     * - no parsing: "the description will be "like this""
     * - parsing: "the description will be \"like this\""
     */
    description: `${post.description}`,
    image: post.featuredImage && {
      url: post.featuredImage.url,
      width: post.featuredImage.width,
      height: post.featuredImage.height,
      alt: intl.formatMessage({ id: `blogPost.featuredImage` }),
    },
    article: {
      publishedTime: post.publishedAt,
      modifiedTime: post.publishedAt,
      tags: post.tags?.map((tag) => tag.name) ?? [],
    },
  }}
>
  {
    post.featuredImage ? (
      <FeaturedImage
        lang={lang}
        featuredImage={post.featuredImage}
        unsplash={post.unsplash}
      />
    ) : null
  }
  <section class="w-full col-span-full lg:col-start-2 lg:col-end-12">
    <PostHeading
      title={post.title}
      subtitle={post.subtitle}
      publishedDateLabel={intl.formatMessage(
        {
          id: `blogPost.publishedAt`,
        },
        {
          publishedDate: intl.formatDate(new Date(post.publishedAt), {
            year: `numeric`,
            month: `short`,
            day: `2-digit`,
          }),
        },
      )}
      readingTimeLabel={intl.formatMessage(
        {
          id: `blogPost.readingTime`,
        },
        {
          publishedDate: post.publishedAt,
          readingTime: estimatedReadingTime,
        },
      )}
    />
    {
      post.series ? (
        <SeriesSection
          series={post.series}
          currentPostId={post._id}
          seriesLabel={intl.formatMessage(
            {
              id: `series.sectionDescription`,
            },
            {
              seriesAmount: post.series.posts.length,
            },
          )}
        />
      ) : null
    }
    <ProseContainer class="mt-8">
      <PortableText value={post.content} />
    </ProseContainer>
    {
      post.series ? (
        <>
          <DotDivider />
          <SeriesSection
            series={post.series}
            currentPostId={post._id}
            seriesLabel={intl.formatMessage(
              {
                id: `series.sectionDescription`,
              },
              {
                seriesAmount: post.series.posts.length,
              },
            )}
          />
        </>
      ) : null
    }

    <hr class="mt-10 mb-6" />

    <footer class="flex flex-wrap justify-between">
      {
        post.tags ? (
          <div class="mb-4 mr-4">
            <span class="block mb-4 font-extrabold text-md md:text-lg lg:text-xl md:mb-6">
              Tags
            </span>
            <Tags>
              {post.tags.map((tag) => (
                <Tag class="text-base lg:text-lg">
                  <a
                    href={getTagUrl(tag.slug, lang)}
                    class="underline text-secondary"
                  >
                    #{tag.name}
                  </a>
                </Tag>
              ))}
            </Tags>
          </div>
        ) : null
      }

      <ShareContent
        titleLabel={intl.formatMessage({ id: `blogPost.share` })}
        twitter={{ text: post.description }}
        linkedIn={{ title: post.title, summary: post.description }}
      />
    </footer>
  </section>
</PostLayout>
