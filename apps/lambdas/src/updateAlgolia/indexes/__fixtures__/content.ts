export const postApi = {
  data: {
    posts: [
      {
        id: '5f3eaabd8d32c410783fbe9b',
        title: 'Gatsby Incremental Builds and Github Actions',
        subtitle: 'A quick setup to increase your build performance',
        publishedAt: '2020-04-28',
        locale: 'en',
        slug: 'cache-gatsby-github-actions',
        content:
          'Hey, devs. How is it going during this quarantine? Hope you‚Äôre not getting crazy like I\'m üò¨.\n\nToday I‚Äôd like to bring to you a new feature announced on April 22 by Gatsby team: **Incremental builds**.\n\n<Tweet tweetId="1252991368005324800" />\n\nTo follow this guide you will need to know about Gatsby (of course) but also a bit of knowledge of using Github Actions. I won‚Äôt dive deep in the details of how to set up a CI environment using it so it‚Äôs important to at least have the basics.\n\n---\n\n## Gatsby bottleneck\n\nGatsby is an amazing toolkit to create static websites using React or maybe set up your JAM (JavaScript, API, and Markup) application. Everything works fine, you can find a bunch of plugins to avoid infrastructure code and the concepts are relatively easy to understand since their documentation is well written and has details about almost everything.\n\nThe problem starts as soon as your website starts to have a lot of pages or maybe like my blog, you have a lot of images that need to be processed and compressed to ship a good experience for those who are reading it.\n\nWhen I start my blog, a build would take approximately less than 2 minutes. After migrating my posts from Medium, in the CI it usually takes from 6 to 8 minutes. As you can imagine, as many posts, images, and data you have I add, as slower my build command becomes.\n\n---\n\n## Incremental Build\n\nOf course, I‚Äôm not the only one having this issue. The Gatsby community and adoption are becoming bigger every year given all benefits which it brings for us, developers.\n\nKnowing that they just released a feature called Incremental Build.\n\nThe name is self-explanatory I imagine, you‚Äôll only build/generate what have been changed.\n\nLet‚Äôs imagine you have a website which has 2 pages, home and about. Then you change something on the ‚ÄúAbout‚Äù page and want to ship it. Does it make sense to build both pages? You only have changed in one. It‚Äôs a waste of time and resources.\n\nWith this flag, it‚Äôll check all files previously generated and understand what needs to be built.\n\nAnother nice benefit of it is if you‚Äôre using a CMS which triggers a build for each change you‚Äôve made in a post, page, or any data, you‚Äôll see almost immediately your change live and this is sick!\n\n---\n\n## How it works\n\nIf you check their docs, it already has a page under the ‚Äúimprove performance‚Äù section which explains what‚Äôs the feature and how it works.\n\nIn a nutshell, when you run `yarn gatsby build`, it generates 2 folders:\n\n1. `public/`. Here it‚Äôs your website. Is the folder you need to host in a web server (e.g. Github Pages, Netlify, etc.)\n1. `.cache/`. Here it‚Äôs all files cached to speed up the building process.\n\nMy first thought was: ‚ÄúOk, I only need to persist cache and everything will work‚Äù but reading till the end they made clear: Both pages need to be persisted.\n\n> Note that until this date I‚Äôm writing this post, this feature does not work for `gatsby develop`\n\n---\n\n## My problem\n\nWell, I already explained a bit about my problem: I have tons of images to be processed and a bunch of posts already.\n\nEven when I‚Äôm working by myself, I like to create feature branches for my projects just because I can easily revert code or decisions I made by just pressing a button on Github.\n\nSo, imagine the situation. I create a feature branch, do my changes and apart from the pipeline saying to me: ‚ÄúHey, lint, tests, and build are working fine, ship it‚Äù, I like to see a live preview that Netlify offers to me.\n\nThe first time takes 8 minutes.\n\nThen when I see it online, I notice that I forgot to see something. I fix it and push. Another 8 minutes.\n\nAnother case I have is when dependabot creates a PR for me from a major version or maybe I‚Äôm using a beta version from some dependency like I‚Äôm doing right now with framer-motion.\n\nThe pipeline will say it‚Äôs green but I still want to check the live preview and be sure that the change won‚Äôt affect the experience I want for my website.\n\nWhen the Gatsby team announced, they (for obvious reasons) did an ad for their cloud platform, Gatsby Cloud.\n\nI have to confess that I was planning on moving there until I realized that when you connect Gatsby Cloud with Github, it has a bug (it might be already fixed) that does not update the stats of ‚Äúbuild‚Äù to ‚Äúdone‚Äù.\n\nAfter that, I just had one option, making it work for Github Actions.\n\nFirst I tried to Google to see if people already had solved this problem but I couldn‚Äôt find anything. Maybe because it‚Äôs new, maybe because google search didn‚Äôt rank well yet.\n\nEven not being a CI expert, I have figured out a bunch of stuff by myself reading official docs and inspecting how people set up in open-source projects (pro tip), then I just decided to try by myself.\n\n---\n\n## Setting it up\n\nTo enable this feature, be sure you have installed gatsby version 2.20.4 or higher.\n\nAfter that, you need to specify an environment variable named **GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES** to true in your build context, like:\n\n```shell\nGATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES=true yarn gatsby build\n```\n\nIf you want to see what pages have been changed, you can pass the flag `--log-pages` at the end of the command.\n\nIn your Github Actions config, you can just add this variable inside ‚Äúenv‚Äù context in the build step:\n\n```yml\n# CI setup, Install dependencies, lint and tests...\n      - run: yarn build --log-pages\n        name: Build\n        env:\n          GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: true\n          NODE_ENV: production\n            CI: true\n```\n\n> Note that my `build` script is a simpler version of `gatsby build`.\n\nAwesome. The flag will be available when run build.\n\nNow, we need to, somehow, create a CI cache for both `public` and `.cache`.\n\nTo do that I‚Äôll use a pre-built action called, guess what, ‚Äúcache‚Äù.\n\nIn their docs they give a bunch of explanations how to use, not that complicated, here is the code:\n\n```yml\n# CI Setup\n- name: Gatsby Cache Folder\n  uses: actions/cache@v1\n  id: gatsby-cache-folder\n  with:\n    path: .cache\n    key: ${{ runner.os }}-cache-gatsby\n    restore-keys: |\n      ${{ runner.os }}-cache-gatsby\n\n- name: Gatsby Public Folder\n  uses: actions/cache@v1\n  id: gatsby-public-folder\n  with:\n    path: public/\n    key: ${{ runner.os }}-public-gatsby\n    restore-keys: |\n      ${{ runner.os }}-public-gatsby\n\n# Install dependencies, lint, test and build...\n```\n\nBoth steps are the same, it changes what‚Äôs going to be cached.\n\nThe important pieces of this code are:\n\n- path: which folder you want to cache;\n- key: the name of your cache. In this case, I just copied from my yarn cache. In the end, it will be `Linux-cache-gatsby` and `Linux-public-gatsby` but it can be whatever you want to define.\n\nRestore keys are not that important for this case (maybe for now) but in a nutshell, it defines a list of cache priorities to pick. Imagine you have more caches like `Linux-cache-gatsby-4983b10b` (with a hash), you can say something like:\n\n```yml\nrestore-keys: |\n  ${{ runner.os }}-public-gatsby-4983b10b\n  ${{ runner.os }}-public-gatsby\n```\n\nIf the first isn‚Äôt available, it‚Äôll pick the second or it‚Äôll define that it has no cache.\n\nAnd that‚Äôs it. This is all you need to make it work.\n\nHere\'s my final file:\n\n```yml:ci.yml\nname: Node.js CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n\n      - name: Yarn cache directory\n        id: yarn-cache-dir\n        run: echo "::set-output name=dir::$(yarn cache dir)"\n\n      - name: Yarn cache\n        uses: actions/cache@v1\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles(\'**/yarn.lock\') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      # In order to make gatsby incremental build works, it\'s necessary .cache\n      # and public folder.\n      - name: Gatsby Cache Folder\n        uses: actions/cache@v1\n        id: gatsby-cache-folder\n        with:\n          path: .cache\n          key: ${{ runner.os }}-cache-gatsby\n          restore-keys: |\n            ${{ runner.os }}-cache-gatsby\n\n      - name: Gatsby Public Folder\n        uses: actions/cache@v1\n        id: gatsby-public-folder\n        with:\n          path: public/\n          key: ${{ runner.os }}-public-gatsby\n          restore-keys: |\n            ${{ runner.os }}-public-gatsby\n\n      - run: yarn install --pure-lockfile\n        name: Install dependencies\n\n      - run: yarn lint\n        name: Run ESLint\n\n      - run: yarn jest --color\n        name: Run Test\n        env:\n          CI: true\n\n      - run: yarn build --log-pages\n        name: Build\n        env:\n          # incremental builds\n          # https://www.gatsbyjs.org/docs/page-build-optimizations-for-incremental-data-changes/\n          GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: true\n          NODE_ENV: production\n          ENVIRONMENT: ${{ contains(github.ref, \'master\') && \'production\' || \'staging\'}}\n          GATSBY_ALGOLIA_APP_ID: ${{ secrets.GATSBY_ALGOLIA_APP_ID }}\n          GATSBY_ALGOLIA_SEARCH_KEY: ${{ secrets.GATSBY_ALGOLIA_SEARCH_KEY }}\n          ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}\n          GATSBY_ALGOLIA_INDEX_NAME: ${{ secrets.GATSBY_ALGOLIA_INDEX_NAME }}\n\n      - name: Deploy to Netlify\n        uses: nwtgck/actions-netlify@v1.0\n        with:\n          publish-dir: \'./public\'\n          production-branch: master\n          deploy-message: \'Deploy from GitHub Actions\'\n        env:\n          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n```\n\n---\n\n## Results\n\nBefore I show you the benefits I had on my CI, I want to show you how awesome it‚Äôs even locally.\n\nWhen I remove both `.cache` and `public` folder:\n\n```txt\nDone building in 159.0597712 sec\n```\n\nThen if I run with the flag and ask to log, it‚Äôll be:\n\n```txt\ninfo Built pages:\nUpdated page: /offline-plugin-app-shell-fallback/\nUpdated page: /2020/03/dev-js-9\nUpdated page: /en/2020/03/yml-for-fe\nUpdated page: /\nUpdated page: /2019/04/things-i-dont-know-2018\nUpdated page: /2020/03/13/corona-virus-overview\nUpdated page: /2019/03/netlifiy-deploy\nUpdated page: /2018/09/dev-js-8\nUpdated page: /2018/07/it-and-english\nUpdated page: /2018/05/dev-js-7-2\nUpdated page: /2018/04/dev-js-7-1\nUpdated page: /2018/02/dev-js-5-1\nUpdated page: /2018/02/dev-js-5-2\nUpdated page: /2018/01/css-position\nUpdated page: /2018/02/dev-js-6\nUpdated page: /2018/01/dev-js-4\nUpdated page: /2018/01/dev-js-3-2\nUpdated page: /2017/12/dev-js-part-3\nUpdated page: /2017/12/dev-js-part-2\nUpdated page: /2017/12/dev-js-part-1\nUpdated page: /2017/09/deploy-fe-with-surge\nUpdated page: /2017/08/deploy-fe-with-gh-pages\nUpdated page: /2017/07/franz\nUpdated page: /2017/07/regex-part-7\nUpdated page: /2017/06/regex-part-6\nUpdated page: /2017/06/regex-part-5\nUpdated page: /2017/06/regex-part-4\nUpdated page: /2017/05/regex-part-3\nUpdated page: /2017/05/regex-part-2\nUpdated page: /2017/05/regex-part-1\nUpdated page: /2017\nUpdated page: /2018\nUpdated page: /2019\nUpdated page: /2020\nUpdated page: /2020/03\nUpdated page: /2019/03\nUpdated page: /2019/01\nUpdated page: /2018/09\nUpdated page: /2018/07\nUpdated page: /2018/05\nUpdated page: /2018/04\nUpdated page: /2018/02\nUpdated page: /2018/01\nUpdated page: /2017/12\nUpdated page: /2017/09\nUpdated page: /2017/08\nUpdated page: /2017/07\nUpdated page: /2017/06\nUpdated page: /2017/05\nUpdated page: /404/\nUpdated page: /search/\nUpdated page: /uses/\nUpdated page: /404.html\nDone in 23.01s.\n```\n\nThat‚Äôs nice but, what about the CI? Did it have some improvements?\n\nThe following image if from a PR opened by dependabot before I implement cache strategy + incremental builds:\n\n<Image src="https://res.cloudinary.com/duzei21zt/image/upload/v1597942390/site/cache_gatsby_github_actions_before_caching_53c4b8662c.png" width="1488" height="950" alt="cache-gatsby-github-actions-before-caching.png" />‚Äà\n\nThe next one is after implementing the strategy:\n\n<Image src="https://res.cloudinary.com/duzei21zt/image/upload/v1597942390/site/cache_gatsby_github_actions_after_caching_a1efa17632.png" width="1484" height="886" alt="cache-gatsby-github-actions-after-caching.png" />‚Äà\n\n---\n\n## Conclusion\n\nI‚Äôm still figuring out if there are some better strategies to do all this caching thingy, but I already can say that I‚Äôm pretty happy with the final results.\n\nI assume is that this feature is only at the beginning. Have you noticed that the flag has named with "EXPERIMENTAL"? As soon they get more and more builds and examples in different repos they will enhance this more and more.\n\nAnyways, I hope I could help you a bit in case you‚Äôre also having issues with that. You can find below all links from all resources I used and also the link to my project!\n\n---\n\n## Resources\n\n- [This blog repo](https://github.com/raulfdm/raulmelo.dev)\n- [Oficial feature announcement](https://www.gatsbyjs.org/blog/2020-04-22-announcing-incremental-builds/)\n- [Gatsby Incremental build documentation](https://www.gatsbyjs.org/docs/page-build-optimizations-for-incremental-data-changes/)\n- [JAM stack](https://jamstack.org/)\n- [Actions/cache](https://github.com/marketplace/actions/cache)\n\n\n',
        tags: [
          {
            slug: 'front-end',
            name: 'Front-end',
            id: '5f390975f5ec161249bd8cdf',
          },
          {
            slug: 'devops',
            name: 'DevOps',
            id: '5f39098ef5ec161249bd8ce0',
          },
          {
            slug: 'github-actions',
            name: 'Github Actions',
            id: '5f3948d4e57aa266137e0ffc',
          },
          {
            slug: 'ci-cd',
            name: 'CI/CD',
            id: '5f39642d2163ea002152ca9c',
          },
        ],
        featured_image: {
          width: 1920,
          height: 889,
          url:
            'https://res.cloudinary.com/duzei21zt/image/upload/v1597942390/site/cache_gatsby_github_actions_featured_img_844a0fe924.png',
        },
      },
      {
        id: '5f3fa398d511c2380b097af0',
        title: 'YAML for Web Developers',
        subtitle: 'A small guide to help you write and read .yml files',
        publishedAt: '2020-03-19',
        locale: 'en',
        slug: 'yaml-for-web-developers',
        content:
          'More and more, we, web developers need to learn about different areas to become better professionals and less dependent on others for simple things.\n\nIf you start a career as FE, you might see a lot of `.yml` files like `.travis.yml` (for Travis Build), `.gitlab-ci.yml` (for git lab CI), etc. but, let\'s be honest, what the hell?\n\nWhy would people use this kind of file? What\'s the benefit of it? How does this thing work?\n\nSo, the goal of this article is to introduce you to the `YAML` structure and give you more confidence to understand, read, and change a file like this when you need it.\n\nAfter all, we tend to feel very uncomfortable and frustrated and we need to do something and we can\'t even understand what\'s that.\n\n---\n\n## But first, What is YAML?\n\nAccording to [the official website](https://yaml.org/), Yaml is:\n\n<BigQuote>\n  "YAML (a recursive acronym for "YAML Ain\'t Markup Language") is a\n  human-friendly data serialization standard for all programming languages."\n</BigQuote>\n\nHeavily used to write configuration files, which explains A LOT, right?\n\nPeople were tired to have a bunch of configs nobody could understand until someone just say:\n\n> What if we could somehow write our configuration like a "cake recipe"? I mean minimum bare text, very straight forward?\n\nBoom, in May 2001 Yaml was created.\n\n---\n\n## YAML vs JSON\n\nSurprisingly (or not really), Yaml is a superset of our well-known buddy JSON.\n\n> "Superset is A programming language that contains all the features of a given language and has been expanded or enhanced to include other features as well." - [Font](https://encyclopedia2.thefreedictionary.com/superset)\n\nIf I could give you a perspective of what it means I would say:\n\n> In a FE world, Yaml would matches for TypeScript while JSON for JavaScript\n\nTo better understand how this would be even possible let\'s see this example:\n\n```json:tsconfig.json\n{\n  "compilerOptions": {\n    "module": "system",\n    "noImplicitAny": true,\n    "removeComments": true,\n    "preserveConstEnums": true,\n    "outFile": "../../built/local/tsc.js",\n    "sourceMap": false,\n    "types": ["node", "lodash", "express"]\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "**/*.spec.ts"]\n}\n```\n\nThis is a `tsconfig.json` example. very easy to read, we can easily identify what\'s what but... it has some limitations, like:\n\n- Can\'t create variables;\n- Can\'t use external variables (e.g. environment variables)\n- Override values;\n\nIn JS world, if we can create a `.json` a configuration file, we almost always also can create a `.js` (like `.eslintrc` or `.eslint.js`) which allows us to mitigate the CONS mentioned before.\n\nBut then, if you\'re using other programing language, JS files isn\'t an option. And it\'s at this point Yaml starts to shine.\n\nIf we\'d have to re-write the `tsconfig.json` in `YAML` syntax and having the exactly result, it\'d be like:\n\n```yaml:tsconfig.yml\ncompilerOptions:\n  module: system\n  noImplicitAny: true\n  removeComments: true\n  preserveConstEnums: true\n  outFile: \'../../built/local/tsc.js\'\n  sourceMap: false\n  types:\n    - node\n    - lodash\n    - express\ninclude:\n  - src/**/*\nexclude:\n  - node_modules\n  - \'**/*.spec.ts\'\n```\n\n> Note this is only an example. You cannot write your `tsconfig` in YAML! üòú\n\nI hope you\'re starting to get the idea from these files.\n\n---\n\n## Concepts, Types, and Syntax\n\nNow, let\'s dive deep a bit in the concept of the language.\n\n### Indentation\n\n<!-- prettier-ignore -->\nIn Yaml, indentation **does matter**. It uses _whitespace indentation_ to nest information. By whitespace, keep in mind `tab` is not allowed.\n\nIf you\'re like me and uses tab for everything, install some plugin in your IDE to replace your tabs for spaces (like [editorconfig](https://editorconfig.org/)). Doing that, when you hit a tab, it\'ll automatically replace your tab by space and you don\'t even need to use your space bar! ;)\n\n### Root\n\nSince indentation matters here, if there\'s no space before the first declaration YAML will understand that\'s the root (level 0) of your file:\n\n```yml\nperson:\n  age: 20\n```\n\nLike we have in JSON with the first `{` curly brackets:\n\n```json{1}\n{\n  "person": {\n    "age": 20\n  }\n}\n```\n\n### Key/Value\n\nLike in JSON/JS, `YAML` also uses the `key/value` syntax and you can use in various ways:\n\n```yml\nkey: value\nkey_one: value one\nkey one: value # This works but it\'s weird\n\'my key\': somekey\n```\n\n### Comments\n\nTo write a comment you just have to use `#` followed by your message.\n\n```yml\n# I\'m a comment\nperson: # I\'m also a comment\n  age: 20\n```\n\nThis is cool to document some decision or make a note. Unfortunately, we can\'t do this with JSON.\n\n### Lists\n\nThere\'re 2 ways to write lists:\n\n#### JSON way: array of strings\n\nRemember Yaml is a JSON\'s superset? we can use its syntax:\n\n```yml\npeople: [\'Anne\', \'John\', \'Max\']\n```\n\n#### Hyphen syntax\n\nThe most common (and probably recommended)\n\n```yml\npeople:\n  - Anne\n  - John\n  - Max\n```\n\n### Strings\n\nThere\'re a few ways to declare a string in Yaml:\n\n<!-- prettier-ignore -->\n```yml\ncompany: Google # Single words, no quotes\nfull_name: John Foo Bar Doe # Full sentence, no quotes\nname: \'John\' # Using single quotes\nsurname: "Christian Meyer" # Using double quotes\n```\n\nWhile in JSON we would have only a way to use double quotes:\n\n```json\n{\n  "company": "Google",\n  "full_name": "John Foo Bar Doe",\n  "name": "John",\n  "surname": "Christian Meyer"\n}\n```\n\nAs a suggestion, prefer to use quotes when you want to use **any** special character like `_`, `@`, etc.\n\n### Numbers\n\nLike in any programming language, we have 2 types of number: Integer and Float:\n\n```yml\nyear: 2019 # Integer\nnodeVersion: 10.8 # Float\n```\n\n### Node Anchors (variables-ish)\n\nAn anchor is a mechanism to create a group of data (an object) that can be injected or extended from other objects.\n\nLet\'s imagine you need to create a configuration for your CI. It\'ll have both `production` and `staging` environments. As you can imagine, they share almost the same base settings.\n\nIn JSON world, we would have to duplicate these configs:\n\n```json\n{\n  "production": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": {\n      "ENVIRONMENT": "production"\n    }\n  },\n  "staging": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": {\n      "ENVIRONMENT": "staging"\n    }\n  }\n}\n```\n\nCopy and paste are also annoying, especially when you have to change something in all places it\'s been used those Infos.\n\nAnchors came to solve that problem. We can:\n\n1. First, create our anchor\n\n```yml{3}\n# I name it as "base-config" but it can be whatever\n# &base will be the "variable name" you\'ll use in the injection\nbase-config: &base\n  node_version: 13.0.0\n  os: ubuntu\n  package_manager: yarn\n  run:\n    - yarn install\n    - NODE_ENV=${ENVIRONMENT} yarn build\n```\n\n2. Then, injecting the anchor created in the level we want to have to see these values being injected:\n\n```yml{11,17}\nbase-config: &base\n  node_version: 13.0.0\n  os: ubuntu\n  package_manager: yarn\n  run:\n    - yarn install\n    - NODE_ENV=${ENVIRONMENT} yarn build\n\nproduction:\n  # I\'m injecting all "base" attributes and values inside production\n  <<: *base\n  env:\n    - ENVIRONMENT: production\n\nstaging:\n  # I\'m injecting all "base" attributes and values inside staging\n  <<: *base\n  env:\n    - ENVIRONMENT: staging\n```\n\nLooks simpler, right? And also easier to maintain.\n\nIf you copy this code and paste into a "Yaml to JSON converter" online tool you\'ll see the same code as I mentioned early in the JSON example but within the addition of the base config:\n\n```json{8-29}\n{\n  "base-config": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"]\n  },\n  "production": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": [\n      {\n        "ENVIRONMENT": "production"\n      }\n    ]\n  },\n  "staging": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": [\n      {\n        "ENVIRONMENT": "staging"\n      }\n    ]\n  }\n}\n```\n\n### JSON syntax (yes, JSON)\n\nAs explained before a superset of a language is the base language PLUS some extra features, which means we could write a `Yaml` file in JSON way\n\n<!-- prettier-ignore -->\n```yml\n{\n  "details": {\n    "company": {\n      "name": "Google",\n      "year": 2019,\n      "active": true\n    },\n    "employees": [\n      "Anne",\n      "John",\n      "Max"\n    ]\n  }\n}\n```\n\n> Doubting? Copy this code and paste [it here](https://onlineyamltools.com/convert-yaml-to-json)\n\nIf you convert this YAML to JSON, you\'ll have the same structure:\n\n```json\n{\n  "details": {\n    "company": {\n      "name": "Google",\n      "year": 2019,\n      "active": true\n    },\n    "employees": ["Anne", "John", "Max"]\n  }\n}\n```\n\n### Shell/Bash environment\n\nAs I told at the beginning of this article, it\'s very common `.yml` files are used as config files for many things, but especially for CI/CD environment.\n\nFor those, you\'ll have to describe how the machine/docker should work, what should be installed, ran, etc.\n\nCommonly, all those environments are Linux, which means you\'ll also have access to the environment itself.\n\nOn GitLab CI, for instance, you can specify on a global level environment variables you want to have available for the whole process:\n\n```yml{1-2,8}\nvariables:\n  NODE_IMAGE: node:10\n\nstages:\n  - build\n\ntest:\n  image: $NODE_IMAGE\n  stage: build\n```\n\nNote that the syntax to use variables by `$` isn\'t from YAML but `shell/bash`.\n\nWhat GitLab CI does is getting everything you\'d defined in `variables` and creates `shell` variables.\n\nSome other platforms also inject other values like commit ref, branch name, build time, author and also secret keys defined outside the configuration:\n\n```yml{11}\nvariables:\n  NODE_IMAGE: node:10\n\nstages:\n  - build\n\ntest:\n  image: $NODE_IMAGE\n  stage: build\n  artifacts:\n    name: $CI_COMMIT_REF_NAME\n```\n\nIn the example above, we\'re using a `$CI_COMMIT_REF_NAME` external environment variable that GitLab CI platform makes available which describes `The branch or tag name for which the project is built`.\n\n---\n\n## Conclusion\n\nI hope you now understand a bit more about YAML and at least feel comfortable reading and write your files.\n\nKeep in mind that what you\'ll have access to or not, the limitations will be determined by the platform you\'re using. Travis defines a different configuration than GitLab CI or CircleCI for example.\n\nAlways check the documentation from the platform you\'re working on to see what\'s possible or not to be done! :)\n\n---\n\n## References\n\n- [YAML Website](https://yaml.org/). (You can find parses for all languages there);\n- [Learn X in Y Minutes: YAML](https://learnxinyminutes.com/docs/yaml/): Here a whole guide/introduction about everything YAML can do for you;\n- [JSON ‚Üê‚Üí YAML Online converter](https://www.json2yaml.com/): Useful to visualize what generates what and create a better understanding;\n- [YAML by Wikipedia](https://en.wikipedia.org/wiki/YAML)\n',
        tags: [
          {
            slug: 'yaml',
            name: 'Yaml',
            id: '5f3fa2bad511c2380b097ae9',
          },
          {
            slug: 'introduction',
            name: 'Introduction',
            id: '5f3fa370d511c2380b097aee',
          },
          {
            slug: 'development',
            name: 'Development',
            id: '5f3fa377d511c2380b097aef',
          },
        ],
        featured_image: {
          width: 2684,
          height: 1106,
          url:
            'https://res.cloudinary.com/duzei21zt/image/upload/v1598005862/site/yaml_para_desenvolvedores_web_featured_img_4c38d17c77.png',
        },
      },
      {
        id: '5fc3be95cbcafe002155aa29',
        title: 'Module Resolution or Import Alias: The Final Guide',
        subtitle:
          'A guide how to enable this feature in (almost) any JS/TS project.',
        publishedAt: '2020-11-29',
        locale: 'en',
        slug: 'module-resolution-or-import-alias-the-final-guide',
        content:
          'Hello, devs.\n\nThis is might be an old topic but I think it still can be a bit confused when you try to do this configuration:\n\n> How can I add aliases to my imports?\n\nThe idea here is to do not stitch in any specific framework/tool but to give you an idea of knowing what and how to do, based on your application setup.\n\nFirst, let\'s check what problem we\'re trying to solve, a solution in a more abstract way and how to configure your project to support that.\n\n\n## Table of Content\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Configuration](#configuration)\n  - [Editor completion](#editor-completion)\n  - [Babel](#babel)\n  - [Rollup](#rollup)\n  - [Webpack](#webpack)\n  - [Jest](#jest)\n  - [Typescript](#typescript)\n  - [Other Tools](#other-tools)\n- [Prefix Strategy](#prefix-strategy)\n- [Conclusion](#conclusion)\n\n## Problem\n\nIn well-structured JavaScript applications it\'s common we organize our codebase in a way that makes explicit what these files do or each domain they belong to.\n\nNotwithstanding we don\'t have a standard of "how to structure", we always try to organize like `components`, `helpers`, `models`, etc. and sometimes, creating subfolders inside these folders and as consequence, creating a deeply nested structure.\n\nLet\'s see an example of a tiny and not too nested app folder structure:\n\n```markdown\n.\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ src\n‚îÇ   ‚îú‚îÄ‚îÄ components\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Button\n‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Button.js\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.js\n‚îÇ   ‚îú‚îÄ‚îÄ helpers\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ text.js\n‚îÇ   ‚îî‚îÄ‚îÄ index.js\n‚îî‚îÄ‚îÄ yarn-error.log\n```\n\nThis is a very basic setup where:\n\n1. We have our `src` (source) which holds our app code;\n2. `src/components` which holds all our app components;\n3. `src/helpers`, which holds all our helpers/utilities which can be used anywhere in our code\n\nNow let\'s say we to import a function called `sanitizeText` from our helper text inside our Button component. We would do something like:\n\n```jsx\nimport React from "react";\nimport { sanitizeText } from "../../helpers/text";\n\nexport const Button = ({ text }) => {\n  return <button>{sanitizeText(text)}</button>;\n};\n```\n\nIt\'s not so bad, but as soon as you start having more and more imports from different folders and levels, it starts to become more confusing.\n\nAlso, you **always** need to guess how many levels you have to go up and down to import your code. Of course, modern code editors can help you out with that by just showing you which level you are and sometimes even completing it for you, but still.\n\nAnother problem is that if you eventually create a subfolder (for whatever reason you might have), you need to fix ALL imports by adding another "go up" level in the path.\n\nThat\'s not too much work but isn\'t by far optimal. We have a better way to do that and it\'s via `module resolution` or `import alias`\n\n## Solution\n\nModule resolution or import alias is a way we can emulate the same way we import `node_modules` but with our internal code.\n\nWe can say to the tool we\'re using:\n\n> Hey, when you encounter "helpers/text", could you consider "./src/helpers/text" please?\n\nIn the same example above we would have some code like this:\n\n```jsx\nimport React from "react";\nimport { sanitizeText } from "helpers/text";\n\nexport const Button = ({ text }) => {\n  return <button>{sanitizeText(text)}</button>;\n};\n```\n\nMuch cooler, right?\n\nYou\'ll import from `helpers` and it does not matter how deep you are in your app structure. Even if you move around this file, the imports will be always correct.\n\nAt the end of the day it\'s like import a library in our project. Imagine if you have to every time go up and down inside `node_modules` until you find your dependency:\n\n```jsx\nimport React from "react";\nimport { sanitizeText } from "helpers/text";\nimport { camelCase } from \'../../../node_modules/lodash\'\n\nexport const Button = ({ text }) => {\n  return <button>{camelCase(sanitizeText(text))}</button>;\n};\n```\n\nThis would be hell. A lot of waste of energy having to navigate to the code.\n\n## Configuration\n\nJavaScript itself does not allow us doing that those imports natively. But luckily we are always using a tool that supports that (e.g. Babel, Webpack, etc).\n\nYou might think:\n\n> Nice, I only need to do once this configuration!\n\nAnd the answer is: it depends... but probably not.\n\nThe more tooling you introduce in your application, the more complicated it becomes to get it configured. Here some examples where this could be tricky:\n\n- If you\'re working on a JS project only with **Babel** and add **jest** to test your app, you\'ll need to add aliases in **both** places.\n- If you\'re working in a JS project with some built-in **Webpack** config and you add **Storybook**, you\'ll need to add an alias in both `webpack.config.js` and also customize Storybook `babel.config.js`.\n- If you\'re working on a JS project with all these configurations and want to move to **TypeScript**, you\'ll need to keep this configuration everywhere plus configure the `tsconfig.json` file to let TS aware of how to resolve those aliases.\n\nAs you can see this can be puzzling but here I want to give you an understanding of each possible tool. After that, you\'ll check how your project works and do all configurations needed to enable this feature into your project.\n\n### Editor completion\n\nBefore we dive deep into the configs, let\'s talk about Developer Experience (DX).\n\nIf you use VSCode, you probably already notice that when you need to import something, because VSCode uses TS, and it does a lot of inference, usually it\'s possible either to automatically imports the method you\'re trying to use or have an autocompletion for the imports, right?\n\nWhen you just configure alias in Babel, for example, you kinda lost that and that\'s sucks.\n\nIf we want to let VSCode aware of how to suggest these modules, we need to create a file called `jsconfig.json` (in root level), which it\'s a JavaScript version of `tsconfig.json` and also declare those alias there:\n\n```json:jsconfig.json\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "*": [\n        "./src"\n      ],\n      // Your custom aliases here\n      "helpers/*": [\n        "helpers"\n      ],\n      "models/*": [\n        "models"\n      ]\n    }\n  }\n}\n```\n\nEvery time you add a new alias to your project, all you need to do is come to this file and add your new alias.\n\nIf you use Typescript you don\'t need this file because this configuration will be made there.\n\nNow, let\'s dive deep into the specifics.\n\n------\n\n### Babel\n\n#### Description\n\nIf your project has a `babel.config.js` or `.babelrc` file at the root level, you\'ll probably need to do this configuration.\n\n#### Configuration\n\nFirst, you need to install the plugin `babel-plugin-module-resolver`:\n\n```bash\nyarn install -D babel-plugin-module-resolver\n```\n\nThen, add this plugin into your babel config file:\n\n```json:.babelrc\n{\n  "presets": [\n    // ....\n  ],\n  "plugins": [\n    // ....\n    [\n      "babel-plugin-module-resolver",\n      {\n        "root": [\n          "./src"\n        ],\n        "alias": {\n\t\t  // Add your aliases here\n          "helpers": "./src/helpers",\n          "models": "./src/models"\n        }\n      }\n    ]\n  ]\n}\n```\n\nAfter this, you\'ll be able to import files from `helpers/<file>` and `models/<file>`.\n\n#### Resources\n\n- Babel Only Demo: https://github.com/raulfdm/aliases-post-demo/tree/main/babel-only\n\n- babel-plugin-module-resolver: https://www.npmjs.com/package/babel-plugin-module-resolver\n\n------\n\n### Rollup\n\n#### Description\n\nRollup is one of the most annoying tools to do this configuration. That\'s because the official plugin to do that isn\'t smart enough to recognize `index.js` imports.\n\nIf you try to do something like `models/User/` the plugin will complain saying that "models/User" is a folder, not a file. In that sense, you\'ll need to give full import, like `models/User/index`.\n\nAfter some tests, I\'ve realized that isn\'t necessarily the plugin\'s fault. If we try to enable this feature via `@rollup/plugin-babel`, we still need to import `index` at the end of our import. It seems that that\'s the way Rollup handles import and we cannot do anything about it.\n\n#### Configuration\n\nThe first step is installing `@rollup/plugin-alias`.\n\nAfter that, in your `rollup.config.js` you import it and set it up:\n\n```javascript:rollup.config.js\nimport alias from "@rollup/plugin-alias";\nimport path from "path";\n\nexport default {\n  input: "src/index.js",\n  output: {\n    format: "cjs",\n    dir: "dist",\n  },\n  plugins: [\n    alias({\n      /**\n       * For custom files extension you might want to add "customerResolver"\n       * https://github.com/rollup/plugins/tree/master/packages/alias#custom-resolvers\n       *\n       * By doing that this plugin can read different kind of files.\n       */\n      entries: [\n        {\n          find: "models",\n          replacement: path.resolve(__dirname, "src/models"),\n        },\n        {\n          find: "helpers",\n          replacement: path.resolve(__dirname, "src/helpers"),\n        },\n      ],\n    }),\n  ],\n};\n\n```\n\n> Remember: imports from `index.js` files DOES NEED to be full imports\n\n#### Resources\n\n- Rollup Demo: https://github.com/raulfdm/aliases-post-demo/tree/main/rollup\n- Rollup + Babel Demo: https://github.com/raulfdm/aliases-post-demo/tree/main/rollup-babel\n- @rollup/plugin-alias: https://github.com/rollup/plugins/tree/master/packages/alias#readme\n\n------\n\n### Webpack\n\n#### Description\n\nWebpack allows us to do the same as Babel but via its configuration. In case you\'re working on a project which already had a `webpack.config.js` somewhere in the code, it\'s there you\'ll need to tweak.\n\n#### Configuration\n\n```js:webpack.config.js\nconst path = require(\'path\');\n\nmodule.exports = {\n  // ...\n  resolve: {\n    alias: {\n      // Your custom aliases here\n      // __dirname will stands for your root directory level\n      // path.resolve will concatenate your project folder location with the aliased folder\n      helpers: path.resolve(__dirname, \'src/helpers/\'),\n      models: path.resolve(__dirname, \'src/models/\')\n    }\n  }\n};\n```\n\nIf you\'re working with a framework/platform which works with Webpack under the hood and allows you to extend its configuration, the solution will be slightly different but the same concept.\n\nFor example, I\'ll show you a `next.config.js` file from NextJS which allow us to extend their configuration:\n\n```js:next.config.js\nconst path = require(\'path\');\n\nmodule.exports = {\n  webpack: (config) => {\n    // Mutate the alias configuration\n    config.resolve.alias = {\n      // Spread everything to avoid remove any alias they might have\n      ...config.resolve.alias,\n      // Your custom aliases here\n      helpers: path.resolve(__dirname, \'src/helpers/\'),\n      models: path.resolve(__dirname, \'src/models/\')\n    }\n\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\n#### Resources\n\n- Demo Webpack only: https://github.com/raulfdm/aliases-post-demo/tree/main/webpack\n- Extending Webpack NextJS: https://github.com/raulfdm/aliases-post-demo/tree/main/next-webpack\n\n- Webpack Docs: https://webpack.js.org/configuration/resolve/#resolvealias\n\n------\n\n### Jest\n\n#### Description\n\nNow that we already have our aliases working in our regular environment, let\'s see how can we make Jest aware of how to resolve our aliases\n\nUnfortunately, their API for that is by far one of the most complicated ones. That\'s because they use for stub out mocks and their test stuff and not for our organized code. But luckily we can grasp it.\n\nTo do that, first, you need to understand where your jest config is. It can be inside of `package.json` or in a `jest.config.js` file in the root level of your directory.\n\n#### Configuration\n\n\n\n```js:jest.config.js\nmodule.exports = {\n  // ...\n  moduleNameMapper: {\n    // Your custom aliases here\n    "^helpers/(.*)": "<rootDir>/src/helpers/$1",\n    "^modules/(.*)": "<rootDir>/src/modules/$1",\n  },\n};\n```\n\n#### Resources\n\n- Jest Docs: https://jestjs.io/docs/en/configuration.html#modulenamemapper-objectstring-string--arraystring\n- Jest Demo: https://github.com/raulfdm/aliases-post-demo/tree/main/jest\n\n------\n\n### TypeScript\n\n#### Description\n\nFor TS projects, we usually have to attack in two ways:\n\n1. Configure the transpiler/compiler/bundler tool (e.g. Webpack, Babel)\n2. Configure `tsconfig.json`\n\nThat\'s because those tools use a lot of internal tools AND Typescript to generate your final files and for Typescript, what matters is your `tsconfig.json` file.\n\nAlso, you might want to add `tsc --noEmit` as a fancy linter to be sure that at least your code has no errors and will compile right.\n\n#### Configuration\n\nOpen your `tsconfig.json` file and set a `baseUrl` and `paths`:\n\n```json:tsconfig.json\n{\n  "compilerOptions": {\n    // ...\n\n    /* Base URL is a MUST. */\n    "baseUrl": ".",\n    /* Your aliases will live here */\n    "paths": {\n      "models/*": [\n        "src/models/*"\n      ],\n      "helpers/*": [\n        "src/helpers/*"\n      ],\n    }\n  }\n}\n```\n\n> Tip: If you\'re using VSCode, usually you\'ll probably need to restart it to be able to navigate these aliased imports.\n\nJust to be clear, `baseUrl: "."` will tell Typescript to consider the **root level** of your project to build the paths. In that sense, TS will find "models"  and consider something like `<root>/src/models/*`.\n\nIt\'s also common for people defining `baseUrl` to be `src`. If you do so, you can remove `src` from your paths:\n\n```json:tsconfig.json\n{\n  "compilerOptions": {\n    // ...\n\n    /* Base URL is a MUST. */\n    "baseUrl": "src",\n    /* Your aliases will live here */\n    "paths": {\n      "models/*": [\n        "models/*"\n      ],\n      "helpers/*": [\n        "helpers/*"\n      ],\n    }\n  }\n}\n```\n\n#### Resources\n\n- Typescript demo: https://github.com/raulfdm/aliases-post-demo/tree/main/typescript\n- Typescript Docs: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#base-url\n\n------\n\n### Other tools\n\nI tried to focus on the most common tools we use independently a specific framework but each one can have some specificities on how to extend or do this in an easy way.\n\nMy suggestion for you to figure this out is: always search at Google for `<framework-or-tool-name> import alias`. Usually, you\'ll find the answer in one of the top 3 results.\n\n## Prefix Strategy\n\nIn all examples, I just use regular names for our aliases but it\'s also a common practice is adding a prefix (a character before) to them.\n\nPersonally, I\'m very fan of the prefix `@` just because it\'s really nice to read `import something "at" components`  but some people don\'t like this strategy because this special character is very popular for `orgs`, like `@babel`, `@rollup`, and it can mislead developers to think that this import is from an external resource.\n\nAs you notice, this is optional. Feel free to use or not whatever special char to give more clarity about internal X external imports.\n\n## Conclusion\n\nI hope at the end of this article you feel comfortable to tweak your configs and enable this feature if you feel useful somehow.',
        tags: [
          {
            slug: 'front-end',
            name: 'Front-end',
            id: '5f390975f5ec161249bd8cdf',
          },
          {
            slug: 'javascript',
            name: 'JavaScript',
            id: '5f3972a5c998c60021565c2c',
          },
          {
            slug: 'typescript',
            name: 'Typescript',
            id: '5fc3bea4cbcafe002155aa2b',
          },
          {
            slug: 'tooling',
            name: 'Tooling',
            id: '5fc3beb6cbcafe002155aa2c',
          },
        ],
        featured_image: {
          width: 1200,
          height: 630,
          url:
            'https://res.cloudinary.com/duzei21zt/image/upload/v1606664570/site/post_alias_cover_033d2ce8c5.png',
        },
      },
      {
        id: '5f425861cc63b728e57641d3',
        title: 'I failed an interview because of an algorithm',
        subtitle: null,
        publishedAt: '2020-08-16',
        locale: 'en',
        slug: 'i-failed-an-interview-because-of-an-algorithm',
        content:
          'Hello, devs.\n\nFor the last couple of weeks, I\'ve been participating in a hiring process for a big company.\n\nIt was a very nice experience and it gave me a lot of insights about hiring, code challenges, and how (possibly) to become more prepared for interviews.\n\nAs you already saw in the title, I didn\'t pass, but I went through all the stages of it. So it might be interesting for you if you\'re trying to get your first job, or even if you\'re thinking of switching jobs but don\'t do interviews for a couple of years already.\n\nI\'ll explain all stages, with some details and thoughts, but my main focus here is to tell where and why I failed in the last part of it.\n\nHope you like it and I hope my experience can help you somehow!\n\n## Table of content\n\n- [Stage 1: Getting an interview](#stage-1-getting-an-interview)\n- [Stage 2: Human Resources (aka HR)](#stage-2-human-resources-aka-hr)\n- [Stage 3: The managers](#stage-3-the-managers)\n- [Stage 4: the HR (again)](#stage-4-the-hr-again)\n- [Stage 5 (latest): The devs](#stage-5-latest-the-devs)\n  - [About me](#about-me)\n  - [Technical questions](#technical-questions)\n    - [JavaScript questions](#javascript-questions)\n    - [CSS questions](#css-questions)\n    - [HTTP questions](#http-questions)\n  - [Technical Challenge](#technical-challenge)\n  - [After the test](#after-the-test)\n- [The last HR Call](#the-last-hr-call)\n- [Thoughts about hiring X our skills](#thoughts-about-hiring-x-our-skills)\n- [Learnings](#learnings)\n- [Conclusion](#conclusion)\n\n---\n\n## Stage 1: Getting an interview\n\nA very common practice in companies, in general, is to motivate people (with money) to recommend professionals to fill opening jobs (that\'s a good reason why you should build good connections as much as you can with people in and out of the internet).\n\nA friend of mine recommended me to work in his company. Good salary, very well structured and it seemed a very good place to work in, why not try it out?\n\nI just needed to do some adjustments to my [online CV](https://www.raulmelo.dev/cv/) and I was ready.\n\n---\n\n## Stage 2: Human Resources (aka HR)\n\nThe HR from the company just called me to know a bit about me.\n\nThey asked about all my experience, things I\'ve done in my life, whether I had some specific knowledge (like React, testing, Redux, etc) and also questioned about the company I\'m working on.\n\nTo be honest this call just seemed to be a filter for people who lied on their CV, because everything was very basic and trivial.\n\nI was pretty confident in all the answers I gave to her, and at the end of the call she just gave me a positive feedback and then she\'d schedule the next phase with the tech lead and team manager.\n\n---\n\n## Stage 3: The managers\n\nThe following week, I had a 1-hour meeting (now with webcam) with the "managers".\n\nTheir job was getting to know about my soft skills. A lot of questions like:\n\n- What is the proudest moment of my career\n- What was the worst technical decision I have ever made\n- How I deal with conflicts\n- How I deal with top-down decision\n- How I handle hard discussions\n\nAnd in between those questions, they constantly asked me to give out examples of situations I have experienced that exemplifies that I thought or worked out a solution in the way I was explaining.\n\nIt was very nice because I could remember some good and bad moments in my career which made me grow up a lot as a professional and also as a person.\n\nWhen I turned the call off, I was still very confident about the final result.\n\nAfter a couple of days, the HR called me saying the managers liked me and the way I answered their questions (maybe someday I can share in details some situations I\'ve been through and my current way to deal with people and job).\n\nThe only feedback she gave to me was: "I needed to be less of a follower".\n\nAnd... of course, they thought I was more of a follower than a leader or something because, to be honest, I\'m almost 30 and I kinda lost the energy to keep fighting pointless discussions about technical tastes and personal ways to code.\n\nI have my opinions and I always can argue why I have them, but to be honest, when the discussion reaches the moment where it\'s an ego thingy or personal taste, I just give up and let people do what they want.\n\nI **do not** care about:\n\n- what\'s the best JS framework;\n- what\'s the best state management library;\n- if we should use reduce or map + filter\n- if we should use `it` or `test` in jest assertions\n\nI **do** care about:\n\n- what solution fits best for the problem;\n- good naming;\n- tested code;\n- a simple solution when it\'s possible;\n- ship the product;\n- my salary at the end of the month;\n\nIn the past, I used to have endless debates about what\'s best, what\'s the worst. Nowadays I still have these discussions but if I notice that we\'re not going anywhere, I just agree and live my life.\n\nBut of course, don\'t be a fool. If I\'m convinced that some bad decisions are being made and I can argue that a different approach is better, I\'ll certainly pursue my vision for a better option.\n\nFrom a company‚Äôs perspective, what\'s the most valuable personality? We can have a long discussion about this.\n\n---\n\n## Stage 4: the HR (again)\n\nThe next phase was again a HR call and she asked me some questions the managers made to me the week before.\n\nShe wanted to see for herself my soft skills.\n\nWell, I didn\'t lie in any of the questions I gave the same answers.\n\nI also tried to explain why the managers thought I was more follower like and it seemed she had got it.\n\nShe gave another positive feedback and then told me the next step would be with 2 devs to test my hard skills and a QA manager would be present just to watch the process.\n\n---\n\n## Stage 5 (latest): The devs\n\nThis one was the trickiest stage and I want to give you full details about how it went. I want to recommend to you guys some articles that might answer those questions if you don\'t know.\n\nI received an email with some topics they could ask like JS, CSS, Testing, State management, React, and Http but still wasn\'t clear how they would approach those concepts.\n\nIt was scheduled to be 1h30m short but it started 10 min late.\n\nWhen I joint the chatroom, as always we did some round presentation and they explained to me how it would work:\n\n1. 20~ min to get know about what I currently do;\n1. 30 min to answer and explain technical concepts;\n1. 30 min to do a code challenge.\n\n### About me\n\nHere again, I had to explain what I do in my current job, but more technically.\n\nWell, it\'s only me and another guy responsible for the entire web ecosystem so I kinda know what the product is and how things are structured.\n\nI had explained to them in detail about what\'s the platform, my responsibilities, what‚Äôs my daily tasks to give to them an idea and how we\'re handling them, etc.\n\nSometimes they asked me to dive deeper in some topics but it was easy at the end.\n\n### Technical questions\n\nHere starts to become a bit tricky because they started a certain quiz. I\'ll try to not dive deep into explanations and solutions but instead, just give my impression, a short idea about it and share an article explaining in detail those questions and concepts.\n\n#### JavaScript questions\n\n##### Can you explain the difference between var, let, and const?\n\nIt can be indeed tricky, especially if you have started learning JS recently. I believe people just say: _always prefer `const` but if you need to reassign then use `let`_.\n\nLuckily I\'ve passed the transition from var to let and const and remember clearly it\'s about `scope`.\n\nTo explain that I used the object mutation even when we use `const`, so they got a second question from here:\n\n> Post about it: https://dev.to/sarah_chima/var-let-and-const--whats-the-difference-69e\n\n---\n\n##### How can you freeze an object?\n\nI know this concept because I caused some bugs while learning ES6. After a few hours trying to know why my object was being mutated, I\'ve found documentation about the native API [`Object.freeze`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze).\n\nIt\'s very straight forward. When we freeze an object any operation which will mutate an object does not change the object itself. Be aware that this freeze only happens at a shallow level (1 object-level deep) and does not freeze objects and arrays nested.\n\n> Post about it: https://dev.to/benjaminmock/const-seal-freeze-immutability-in-js-2m77\n\n---\n\n##### Can you explain what DOM is?\n\nI think that was the easiest one, despite the fact I forgot what the acronym means (**D**ocumment **O**bject **M**odel).\n\n> Post about it: https://dev.to/sukhbirsekhon/dom-tutorial-39n\n\n---\n\n##### Can you explain how events propagate in the DOM?\n\nI knew this question because before I learned React I\'ve created my own JS framework (it was a nice experiment) where I learned a lot about **capturing** event in different levels and also how **bubbling** works.\n\n> Post about it: https://dev.to/jsm91/event-propagation-in-three-parts-4h9\n\n---\n\n##### What\'s the advantage of using a single event to capture events?\n\nIt was still related to this question and to be honest, I wasn\'t sure.\n\nI remember when I had implemented that in Vanilla JS where I had a form and instead attached onChange to all inputs, I just did in the `form` level and had some sort of switch to decide what information to update or what to do but... I\'ve forgotten why this was good. My assumption was about performance.\n\nThe dev told me it was exactly about this and gave me a very good example. Imagine a table with thousands of records. If we attach a single event to each row we would have for sure performance issues because the DOM will have thousands of events to dispatch.\n\nI really liked this example.\n\n> Post about it: https://dev.to/paulryan7/event-delegation-what-is-it-and-why-should-i-care-2e7j\n\n---\n\n##### Do you know what the Request animation frame API is and why we would use that?\n\nI think I\'ve used [Request Animation Frame (RAF) API](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) once or twice in 5 years so I was not sure why such API exists, then I tried a guess: ‚Äútell the browser that we\'re gonna do some animations and get some performance.‚Äù\n\nThey told me it was correct.\n\n> Post about it: https://dev.to/digi0ps/creating-animations-in-javascript-using-requestanimationframe-11nh\n\n---\n\n#### CSS questions\n\n##### Do you know about the different displays?\n\nDidn\'t get much this question. I wasn\'t sure if I needed to explain each display or just say: "yes, I know".\n\nBut my answer was saying I have a few displays we have like `inline`, `inline-block`, `block`, `grid`, `flex`, etc.\n\nTo my surprise, it\'s what they wanted to hear.\n\n> Post about it: https://dev.to/phuchieu/css-display-property-4nai\n\n---\n\n##### What\'s the difference between display inline and display inline-block?\n\nThis I didn\'t know by heart.\n\nI knew the difference between inline and block because it\'s a very common thing to do in CSS but I couldn\'t remember the difference between `inline` and `inline-block`.\n\nThe dev explained to me that when we have `inline-block` we can define margin and padding to the element while in display inline we can\'t.\n\n> Post about it: https://dev.to/smeet_j/css-basics-layout-fundamentals-block-inline-inline-block-464h\n\n---\n\n##### How can I center something vertically?\n\nAlso another tricky question and maybe because we have several ways to do that.\n\nThe way I know by heart is using `display: flex` combined with `justify-content: center` and `align-items: center`.\n\nMy answer was good enough.\n\n> Post about it: https://dev.to/flores8/how-to-vertically-align-anything-with-css-i78\n\n---\n\n#### HTTP questions\n\n##### Can you tell us what methods are available in HTTP?\n\nNot that difficult since I sometimes play with backend in Node.\n\n- `GET`\n- `POST`\n- `DELETE`\n- `PUT`\n- `PATCH`\n\nThen they asked me if I knew the difference between `PUT` and `PATCH` and that\'s tricky.\n\nI remembered one replaced the entire data with the new content and the other just updated the information sent, but I didn\'t know which one did what.\n\nThey told me it was right but who does partial updates is PATCH and a full replacement is PUT.\n\nOn top of this question they asked if I knew about other methods, like `OPTIONS` and to be honest, I didn\'t.\n\nOften I see `OPTIONS` requests in my network tab but I have never asked myself what hell was that.\n\n> Post about it: https://dev.to/flippedcoding/difference-between-those-http-requests-2m13\n\n---\n\n##### How the HTTP status codes are divided?\n\nBasic HTTP things.\n\nI just remember that by heart because since I started building apps that consume APIs, I was curious to know what\'s the thing about these codes and I found this [https status dogs](https://httpstatusdogs.com/) which it\'s an amazing way to understand each code. üòÅ\n\n> Post about it: https://dev.to/bearer/the-http-status-codes-you-need-to-know-1kd\n\n---\n\n### Technical Challenge\n\nI had the feeling I ruled the quiz questions and I was much ready for the technical challenge.\n\n> "30 min might be enough to solve something." I thought\n\nThen they sent to me a link to a [Code Sandbox](https://codesandbox.io/) with a single JS file:\n\n```js\n// index.js\n/*\nWe have lots of deployment dashboards where we have drop-down UI to select\nan application version to deploy. We want to ensure that software\nversion numbers delivered to our UI from the back-end API are \nalways ordered with the newest (highest) available version at the top.\n\nEg:\nconst input = [0.1.0, 3.2.1, 2.2.3, 0.1.1];\nsortVersions(input) should return [3.2.1, 2.2.3, 0.1.1, 0.1.0];\n*/\n\nconst sortVersions = (unsortedVersions) => {\n  // code\n};\n\nexport default sortVersions;\n```\n\nAnd a test file with some assertions to ensure it was correct\n\n```js\n// index.test.js\nimport sortVersions from "./index";\n\nit("should sort correctly numbered versions", () => {\n  const versions = ["0.2.0", "3.1.2", "0.1.6", "5.0.0"];\n  const output = ["5.0.0", "3.1.2", "0.2.0", "0.1.6"];\n  expect(sortVersions(versions)).toEqual(output);\n});\n\n// Other assertions\n```\n\nRules to solve that challenge:\n\n- I could use google to search about JS APIs\n- I couldn\'t use google to search for the problem specifically.\n\nThe first assertion was very easy. My solution was simply:\n\n```js\nconst sortVersions = (unsortedVersions) => {\n  // code\n  return unsortedVersions.sort().reverse();\n};\n```\n\nAnd it passed! :)\n\nThen I had to solve the second assertion:\n\n```js\n// index.js\n\nit("should sort correctly numbered versions with different lengths", () => {\n  const versions = [\n    "1.3.0.9",\n    "0.2.0",\n    "3.1.2",\n    "0.1.6",\n    "5.0.0",\n    "3.3.3.3",\n    "3.3.3.3.3",\n    "3.10",\n    "0.2.0",\n  ];\n\n  const output = [\n    "5.0.0",\n    "3.10",\n    "3.3.3.3.3",\n    "3.3.3.3",\n    "3.1.2",\n    "1.3.0.9",\n    "0.2.0",\n    "0.2.0",\n    "0.1.6",\n  ];\n\n  expect(sortVersions(versions)).toEqual(output);\n});\n```\n\nAnd here I just got stuck.\n\nMy previous solution didn\'t cover cases like this. It just returned:\n\n```js\n[\n  "5.0.0",\n  "3.3.3.3.3",\n  "3.3.3.3",\n  "3.10",\n  "3.1.2",\n  "1.3.0.9",\n  "0.2.0",\n  "0.2.0",\n  "0.1.6",\n];\n```\n\nAnd the reason is kinda obvious for simple string sorting. By default, it goes alphabetically where `3.3` comes after than any `3.1`. But in semantic versioning, we know that `3.10` is greater than `3.3`.\n\nAfter playing around with sort methods, I had an idea about making all versions the same size based on the largest version.\n\nTo be honest, at that moment I was already nervous because I couldn\'t think in a way to solve that "simple" problem and consequently I started to get anxious.\n\nI had some tips from them about how I could solve that but it was a bit hard to understand. Not because they didn\'t explain exactly but because I was trying to figure out many things at the same time.\n\nWhile I was doing some code to make all versions in the same length, time was over.\n\nThe dev asked me if I had more time how would I solve that and I explained that my ideas were making all versions in the same length so I could compare per blocks.\n\nI thank them for their time and we turned off the call.\n\n> If you\'re curious about how to solve this problem I recommend you take a look into [this answer](https://stackoverflow.com/a/6832706) in StackOverflow. I just tested it and it solves all specs.\n\n### After the test\n\nTo be honest with you after I turned the call I felt myself a failure.\n\nIn the past 5 years, I\'ve already solved so much harder problems than that and at the end, I was beaten by a sorting problem, what was wrong with me?\n\nBut I tried to comfort myself: "Ok... I went well in all previous steps, even when they asked me technical questions.. this shouldn\'t count too much".\n\n---\n\n## The last HR Call\n\nAfter a week waiting to see if I was approved I would be accepted or not, the HR person called me saying:\n\n> "Unfortunately we won\'t proceed with you"\n\nI only could feel very frustrated.\n\nThen I asked why and if I could have feedback about what I could improve and she told me:\n\n> "The devs really like your communication, your energy while doing the interview. They liked that you answered most of the technical questions correctly but they thought you didn\'t go well solving the last problem.\n\nhmm... ok, I said.\n\nI could argue in many aways against this decision but let\'s be honest, the decision was made. It wouldn\'t change anything.\n\nI turned off the call, stopped for 5 minutes to digest the feeling of failure, and tried to think about all this process.\n\n---\n\n## Thoughts about hiring X our skills\n\nI don\'t know if you already have had the chance to be the interviewer in your life. I had and I can say for sure: it isn\'t an easy task. And that\'s because the hiring process is very hard in general.\n\nWe need, somehow, to define steps and things to evaluate a candidate and despite our goal of being transparent and analytical, it isn\'t by far a perfect method.\n\nPeople think, learn, solve problems, communicate differently from each other, and in a hiring process, we try to create some guides and filters that we expect about people.\n\nIt means that if someone just does not fit in what you expect, it might be a good signal that this person isn\'t ideal for the job. But... does it mean that this person would be a bad professional?\n\nI don\'t think so.\n\nI remember when I finally could get my first job as a developer, I made a similar code challenge and I just ruled that.\n\nDo you want to know the difference between me 3 years ago and me now? At that moment I was constantly practicing solving algorithms in the FreecodeCamp platform.\n\nAfter I got the job I proved myself a valuable employee and I can say for sure that the hard thinking I used to pass in the interview was not by far what made me ship product, because there were rarely moments **I could not use Google to look how people solve this problem to create another solution on top of it**.\n\nI had some challenging problems to solve and I solved them all in a short or long time, sometimes with others\' help, sometimes by myself.\n\nTo get my current job I had to create a React APP which consumes a public API, add tests (E2E), infinite scroll, animation between pages and host somewhere, explain my solution, my struggles, and do a pair programming to solve some problems I had.\n\nAnd it\'s basically what I do most of the days to earn money.\n\nDoes not being able to solve an algorithm mean that I\'m not a good developer?\n\nI don\'t think so. In my mind, it just says I failed into solving a problem in certain conditions. But again, this is their metric of how to evaluate a professional.\n\nMy point here isn\'t to complain about why I was not hired but to make it clear for you that: failing in an interview **does not mean** you\'re a failure as a professional.\n\n---\n\n## Learnings\n\nOverall, doing all this process taught me a lot.\n\nFor the next interviews, I\'ll be prepared to easily answer questions about soft skills. I\'ll never forget the difference between `inline` and `inline-block` or what is the `HTTP OPTIONS` method and the difference between `PUT` and `PATCH`.\n\nBut my biggest learning was: try to be prepared for everything.\n\nYou might be requested to implement some APP using React, Vue, Angular, whatever, or even solving some tricky problems in JS.\n\nFor that, I already started spending few hours per day trying to solve problems in platforms like [Codewars](https://www.codewars.com/), [FreeCodeCamp Learn](https://www.freecodecamp.org/learn) and [Codility](https://app.codility.com).\n\nWhile I\'m still implementing new things on my personal website and get sharper in how to create a robust front-end application.\n\n---\n\n## Conclusion\n\nHope my experience could give you some insight into what you could do differently to get your first job or at least to be prepared to rule a hiring process!\n',
        tags: [
          {
            slug: 'career',
            name: 'Career',
            id: '5f390f92f95eb21417e28f68',
          },
          {
            slug: 'interview',
            name: 'Interview',
            id: '5f390f99f95eb21417e28f69',
          },
          {
            slug: 'job',
            name: 'Job',
            id: '5f390fb6f95eb21417e28f6a',
          },
        ],
        featured_image: {
          width: 3537,
          height: 2324,
          url:
            'https://res.cloudinary.com/duzei21zt/image/upload/v1598186651/site/siora_photography_hg_FY_1m_ZY_Y0_unsplash_2529f3a52d.jpg',
        },
      },
    ],
    tils: [
      {
        id: '6081113c532c3c28f38780df',
        title: 'How to format Rust code "on save" in VSCODE',
        content:
          'For some reason, when we install Rust VSCODE extension the formatter does not work by default.\nTo do that I we need to enforce the formatter via `settings.json` (or User preference)\n\n```json\n{\n    "[rust]": {\n        "editor.defaultFormatter": "rust-lang.rust", // Makes the magic\n        "editor.formatOnSave": true // Optional\n    },\n}\n```',
        locale: 'en',
        slug: 'how-to-format-rust-code-on-save-in-vscode',
        publishedAt: '2021-04-19',
        tags: [
          {
            name: 'Rust',
            id: '60811147532c3c28f38780e0',
            slug: 'rust',
          },
          {
            name: 'VSCode',
            id: '6085122f8d4cc978989e764c',
            slug: 'vscode',
          },
        ],
      },
      {
        id: '6083bcfbe06b20719026b4b2',
        title: 'How to run Cargo in a nested folder',
        content:
          "Let's say you have the following folder structure:\n\n```text\n.\n‚îú‚îÄ‚îÄ exercise\n‚îî‚îÄ‚îÄ variables\n    ‚îú‚îÄ‚îÄ Cargo.lock\n    ‚îú‚îÄ‚îÄ Cargo.toml\n    ‚îî‚îÄ‚îÄ src\n        ‚îî‚îÄ‚îÄ main.rs\n```\n\nYou're in root level and wants  to run Cargo for `variables` folder. All you need to do is specifying `--manifest-path`:\n\n```bash\ncargo run --manifest-path variables/Cargo.toml\n```",
        locale: 'en',
        slug: 'how-to-run-cargo-in-a-nested-folder',
        publishedAt: '2021-04-18',
        tags: [
          {
            name: 'Rust',
            id: '60811147532c3c28f38780e0',
            slug: 'rust',
          },
        ],
      },
      {
        id: '6083d93d242a834d1a70ee7d',
        title: 'There is a website which generates typography scale',
        content:
          'The site is [`https://type-scale.com/`](https://type-scale.com/).\n\nIt basically allow us creating great typography scale system using different scale rules:\n\n![image.png](https://res.cloudinary.com/duzei21zt/image/upload/v1619253544/site/image_8d33c5df45.png)\n',
        locale: 'en',
        slug: 'there-is-a-website-which-generates-typography-scale',
        publishedAt: '2021-04-05',
        tags: [
          {
            name: 'CSS',
            id: '5f3eaea98d32c410783fbea9',
            slug: 'css',
          },
        ],
      },
      {
        id: '60844e4acfbc7bff4150ed5c',
        title: 'Como formatar c√≥digo Rust "ao salvar" no VSCODE',
        content:
          'Por algum motivo, quando a gente instala o plugin do Rust pro VSCODE, o formatador n√£o funciona por padr√£o.\n\nPra corrigir isso, precisamos configurar nas prefer√™ncias do usu√°rio (`settings.json`):\n\n```json\n{\n    "[rust]": {\n        "editor.defaultFormatter": "rust-lang.rust", // Makes the magic\n        "editor.formatOnSave": true // Optional\n    },\n}\n```',
        locale: 'pt',
        slug: 'como-formatar-codigo-rust-ao-salvar-no-vscode',
        publishedAt: '2021-04-19',
        tags: [
          {
            name: 'Rust',
            id: '60811147532c3c28f38780e0',
            slug: 'rust',
          },
          {
            name: 'VSCode',
            id: '6085122f8d4cc978989e764c',
            slug: 'vscode',
          },
        ],
      },
      {
        id: '608512238d4cc978989e764b',
        title: 'We can choose the suggestion order in VSCode',
        content:
          "One thing that always annoyed me is that the suggestions in VSCode always showed up the snippets first and then the methods, properties, etc.:\n\n\n![2021-04-25_08-49.png](https://res.cloudinary.com/duzei21zt/image/upload/v1619333480/site/2021_04_25_08_49_f957952952.png)\n\nToday I've learned we can customize where to show the snippets. To do that you can go to `Preferences: Open User Settings`, search for `suggestions` and go to the option `Editor: Snippet Suggestion`.\n\nThere you can choose the order, which in my case was `top` and now will be `inline`:\n\n![2021-04-25_08-54.png](https://res.cloudinary.com/duzei21zt/image/upload/v1619333658/site/2021_04_25_08_54_5bf29c5911.png)\n",
        locale: 'en',
        slug: 'choose-the-suggestion-order-in-vscode',
        publishedAt: '2021-04-25',
        tags: [
          {
            name: 'VSCode',
            id: '6085122f8d4cc978989e764c',
            slug: 'vscode',
          },
        ],
      },
      {
        id: '60857b1187d544006174e1f9',
        title: 'In setTimeout, the 3thrd+n argument is passed to the callback',
        content:
          "I've never realized that everything we pass from the 3thrd + n via setTimeout is actually passed to the callback function:\n\n```js\nfunction checkParams(...args){\n  console.log(args); //> ['b', true, 4]\n}\n\nsetTimeout(checkParams, 200, /* From here til the end will be passed*/ 'b', true, 4);\n```\n\n### Resource\n\n- https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#parameters",
        locale: 'en',
        slug: 'settimeout-3thrd-argument-is-passed-to-the-callback',
        publishedAt: '2021-01-13',
        tags: [
          {
            name: 'JavaScript',
            id: '5f3972a5c998c60021565c2c',
            slug: 'javascript',
          },
        ],
      },
      {
        id: '60857c0b87d544006174e1fa',
        title:
          'O terceiro argumento pra frente √© passado para a callback no setTimeout',
        content:
          "Tudo que a gente passar do terceiro argumento pra frente pro `setTimeout` vai ser passado para a funƒá√£o callback:\n\n```js\nfunction checkParams(...args){\n  console.log(args); //> ['b', true, 4]\n}\n\nsetTimeout(checkParams, 200, /* Daqui pra frente */ 'b', true, 4);\n```\n\n### Refer√™ncia\n\n- https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#parameters",
        locale: 'pt',
        slug: 'terceiro-argumento-pra-frente-passado-para-callback-settimeout',
        publishedAt: '2021-01-13',
        tags: [
          {
            name: 'JavaScript',
            id: '5f3972a5c998c60021565c2c',
            slug: 'javascript',
          },
        ],
      },
      {
        id: '60857f1087d544006174e1fb',
        title: 'How to prove that arrow function does not have "this"',
        content:
          'Arrow function has not its own scope. Instead it resolves it lexically which means that "it has access to whatever exists in the place where it\'s been created".\n\nKeep this in mind, it\'s not like "the this of arrow function is lexical". Actually it\'s "arrow function **DOES NOT** have this".\n\nTo prove that you can try to call an arrow function with `call()`, `apply()` or `bind()` and it\'ll throw an error saying that.\n\n\n```js\nvar obj = {\n  num: 100,\n};\n\nvar addFun = function (a, b, c) {\n  return this.num + a + b + c;\n};\nconsole.log(addFun.call(obj, 1,2,3)); // 106\n\nvar addArrow = (a, b, c) => this.num + a + b + c;\nconsole.log(addArrow.call(obj, 1,2,3)); //> NaN (because "this"" is undefined)\n```\n\n### Resources\n\n- https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-namedevaluation\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions',
        locale: 'en',
        slug: 'how-to-prove-that-arrow-function-does-not-have-this',
        publishedAt: '2021-01-13',
        tags: [
          {
            name: 'JavaScript',
            id: '5f3972a5c998c60021565c2c',
            slug: 'javascript',
          },
        ],
      },
      {
        id: '6085807687d544006174e1fc',
        title: 'How to delete all local and remote tags from a Github Repo',
        content:
          "> **BE CAREFUL** : by doing this you'll completely erase ALL existing tags.\n\nWe can simply run the following commands:\n\n```bash\n#Delete local tags.\ngit tag -l | xargs git tag -d\n#Fetch remote tags.\ngit fetch\n#Delete remote tags.\ngit tag -l | xargs git push --delete origin\n#Delete local tasg.\ngit tag -l | xargs git tag -d\n```",
        locale: 'en',
        slug: 'how-to-delete-all-local-and-remote-tags-from-a-github-repo',
        publishedAt: '2021-04-10',
        tags: [
          {
            name: 'Git',
            id: '6085808587d544006174e1fd',
            slug: 'git',
          },
        ],
      },
      {
        id: '60899e6577ec420061b1197f',
        title: 'How to easy fix iTerm2 text navigation (cmd+arrow)',
        content:
          "One thing which bug my mind is the default way to text navigate in iTerm2.\n\nWhen you press `cmd+arrow-left` or `option+arrow left` for instance it, it throw `[D` key.\n\nIn the best I used to replace what key it send to be able to walk through words. However I've found a better way of doing that.\n\nJust open iTerm2, `Profiles -> Edit Profiles -> Keys`. Then you click on `Presets` and select:  `Natural Text Editing`.\n\nNow we can have the same behavior as we have in other apps. :D\n\n--- \n\n### Resource\n\n- https://apple.stackexchange.com/a/218639",
        locale: 'en',
        slug: 'how-to-easy-fix-iterm2-text-navigation',
        publishedAt: '2021-04-28',
        tags: [],
      },
      {
        id: '608b9edde52738ac558e148d',
        title: 'A anchor tag without "href" is not focusable',
        content:
          "If you're trying to test your website tab navigation and the link (anchor tag) is not being focused, it might be the case it's missing `href`attribute:\n\n```html\n<a>I'm not focusable</a>\n\n<a href=\"/\">I'm focusable</a>\n```\n\nIn fact, they also have visually different style:\n\n![Visual difference between anchor with and without href](https://res.cloudinary.com/duzei21zt/image/upload/v1619762823/site/Screenshot_2021_04_30_at_08_06_44_bdfc314872.png)\n\nBut this can be a bit tricky when you're using global styles to normalize all anchor styles, no matter its state.\n",
        locale: 'en',
        slug: 'anchor-tag-without-href-is-not-focusable',
        publishedAt: '2021-04-30',
        tags: [
          {
            name: 'CSS',
            id: '5f3eaea98d32c410783fbea9',
            slug: 'css',
          },
          {
            name: 'HTML',
            id: '608b9ee8e52738ac558e148e',
            slug: 'html',
          },
        ],
      },
    ],
  },
};
