export const postApi = {
  data: {
    posts: [
      {
        id: '5f3eaabd8d32c410783fbe9b',
        title: 'Gatsby Incremental Builds and Github Actions',
        subtitle: 'A quick setup to increase your build performance',
        date: '2020-04-28',
        locale: 'en',
        slug: 'cache-gatsby-github-actions',
        content:
          'Hey, devs. How is it going during this quarantine? Hope you‚Äôre not getting crazy like I\'m üò¨.\n\nToday I‚Äôd like to bring to you a new feature announced on April 22 by Gatsby team: **Incremental builds**.\n\n<Tweet tweetId="1252991368005324800" />\n\nTo follow this guide you will need to know about Gatsby (of course) but also a bit of knowledge of using Github Actions. I won‚Äôt dive deep in the details of how to set up a CI environment using it so it‚Äôs important to at least have the basics.\n\n---\n\n## Gatsby bottleneck\n\nGatsby is an amazing toolkit to create static websites using React or maybe set up your JAM (JavaScript, API, and Markup) application. Everything works fine, you can find a bunch of plugins to avoid infrastructure code and the concepts are relatively easy to understand since their documentation is well written and has details about almost everything.\n\nThe problem starts as soon as your website starts to have a lot of pages or maybe like my blog, you have a lot of images that need to be processed and compressed to ship a good experience for those who are reading it.\n\nWhen I start my blog, a build would take approximately less than 2 minutes. After migrating my posts from Medium, in the CI it usually takes from 6 to 8 minutes. As you can imagine, as many posts, images, and data you have I add, as slower my build command becomes.\n\n---\n\n## Incremental Build\n\nOf course, I‚Äôm not the only one having this issue. The Gatsby community and adoption are becoming bigger every year given all benefits which it brings for us, developers.\n\nKnowing that they just released a feature called Incremental Build.\n\nThe name is self-explanatory I imagine, you‚Äôll only build/generate what have been changed.\n\nLet‚Äôs imagine you have a website which has 2 pages, home and about. Then you change something on the ‚ÄúAbout‚Äù page and want to ship it. Does it make sense to build both pages? You only have changed in one. It‚Äôs a waste of time and resources.\n\nWith this flag, it‚Äôll check all files previously generated and understand what needs to be built.\n\nAnother nice benefit of it is if you‚Äôre using a CMS which triggers a build for each change you‚Äôve made in a post, page, or any data, you‚Äôll see almost immediately your change live and this is sick!\n\n---\n\n## How it works\n\nIf you check their docs, it already has a page under the ‚Äúimprove performance‚Äù section which explains what‚Äôs the feature and how it works.\n\nIn a nutshell, when you run `yarn gatsby build`, it generates 2 folders:\n\n1. `public/`. Here it‚Äôs your website. Is the folder you need to host in a web server (e.g. Github Pages, Netlify, etc.)\n1. `.cache/`. Here it‚Äôs all files cached to speed up the building process.\n\nMy first thought was: ‚ÄúOk, I only need to persist cache and everything will work‚Äù but reading till the end they made clear: Both pages need to be persisted.\n\n> Note that until this date I‚Äôm writing this post, this feature does not work for `gatsby develop`\n\n---\n\n## My problem\n\nWell, I already explained a bit about my problem: I have tons of images to be processed and a bunch of posts already.\n\nEven when I‚Äôm working by myself, I like to create feature branches for my projects just because I can easily revert code or decisions I made by just pressing a button on Github.\n\nSo, imagine the situation. I create a feature branch, do my changes and apart from the pipeline saying to me: ‚ÄúHey, lint, tests, and build are working fine, ship it‚Äù, I like to see a live preview that Netlify offers to me.\n\nThe first time takes 8 minutes.\n\nThen when I see it online, I notice that I forgot to see something. I fix it and push. Another 8 minutes.\n\nAnother case I have is when dependabot creates a PR for me from a major version or maybe I‚Äôm using a beta version from some dependency like I‚Äôm doing right now with framer-motion.\n\nThe pipeline will say it‚Äôs green but I still want to check the live preview and be sure that the change won‚Äôt affect the experience I want for my website.\n\nWhen the Gatsby team announced, they (for obvious reasons) did an ad for their cloud platform, Gatsby Cloud.\n\nI have to confess that I was planning on moving there until I realized that when you connect Gatsby Cloud with Github, it has a bug (it might be already fixed) that does not update the stats of ‚Äúbuild‚Äù to ‚Äúdone‚Äù.\n\nAfter that, I just had one option, making it work for Github Actions.\n\nFirst I tried to Google to see if people already had solved this problem but I couldn‚Äôt find anything. Maybe because it‚Äôs new, maybe because google search didn‚Äôt rank well yet.\n\nEven not being a CI expert, I have figured out a bunch of stuff by myself reading official docs and inspecting how people set up in open-source projects (pro tip), then I just decided to try by myself.\n\n---\n\n## Setting it up\n\nTo enable this feature, be sure you have installed gatsby version 2.20.4 or higher.\n\nAfter that, you need to specify an environment variable named **GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES** to true in your build context, like:\n\n```shell\nGATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES=true yarn gatsby build\n```\n\nIf you want to see what pages have been changed, you can pass the flag `--log-pages` at the end of the command.\n\nIn your Github Actions config, you can just add this variable inside ‚Äúenv‚Äù context in the build step:\n\n```yml\n# CI setup, Install dependencies, lint and tests...\n      - run: yarn build --log-pages\n        name: Build\n        env:\n          GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: true\n          NODE_ENV: production\n            CI: true\n```\n\n> Note that my `build` script is a simpler version of `gatsby build`.\n\nAwesome. The flag will be available when run build.\n\nNow, we need to, somehow, create a CI cache for both `public` and `.cache`.\n\nTo do that I‚Äôll use a pre-built action called, guess what, ‚Äúcache‚Äù.\n\nIn their docs they give a bunch of explanations how to use, not that complicated, here is the code:\n\n```yml\n# CI Setup\n- name: Gatsby Cache Folder\n  uses: actions/cache@v1\n  id: gatsby-cache-folder\n  with:\n    path: .cache\n    key: ${{ runner.os }}-cache-gatsby\n    restore-keys: |\n      ${{ runner.os }}-cache-gatsby\n\n- name: Gatsby Public Folder\n  uses: actions/cache@v1\n  id: gatsby-public-folder\n  with:\n    path: public/\n    key: ${{ runner.os }}-public-gatsby\n    restore-keys: |\n      ${{ runner.os }}-public-gatsby\n\n# Install dependencies, lint, test and build...\n```\n\nBoth steps are the same, it changes what‚Äôs going to be cached.\n\nThe important pieces of this code are:\n\n- path: which folder you want to cache;\n- key: the name of your cache. In this case, I just copied from my yarn cache. In the end, it will be `Linux-cache-gatsby` and `Linux-public-gatsby` but it can be whatever you want to define.\n\nRestore keys are not that important for this case (maybe for now) but in a nutshell, it defines a list of cache priorities to pick. Imagine you have more caches like `Linux-cache-gatsby-4983b10b` (with a hash), you can say something like:\n\n```yml\nrestore-keys: |\n  ${{ runner.os }}-public-gatsby-4983b10b\n  ${{ runner.os }}-public-gatsby\n```\n\nIf the first isn‚Äôt available, it‚Äôll pick the second or it‚Äôll define that it has no cache.\n\nAnd that‚Äôs it. This is all you need to make it work.\n\nHere\'s my final file:\n\n```yml:ci.yml\nname: Node.js CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n\n      - name: Yarn cache directory\n        id: yarn-cache-dir\n        run: echo "::set-output name=dir::$(yarn cache dir)"\n\n      - name: Yarn cache\n        uses: actions/cache@v1\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles(\'**/yarn.lock\') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      # In order to make gatsby incremental build works, it\'s necessary .cache\n      # and public folder.\n      - name: Gatsby Cache Folder\n        uses: actions/cache@v1\n        id: gatsby-cache-folder\n        with:\n          path: .cache\n          key: ${{ runner.os }}-cache-gatsby\n          restore-keys: |\n            ${{ runner.os }}-cache-gatsby\n\n      - name: Gatsby Public Folder\n        uses: actions/cache@v1\n        id: gatsby-public-folder\n        with:\n          path: public/\n          key: ${{ runner.os }}-public-gatsby\n          restore-keys: |\n            ${{ runner.os }}-public-gatsby\n\n      - run: yarn install --pure-lockfile\n        name: Install dependencies\n\n      - run: yarn lint\n        name: Run ESLint\n\n      - run: yarn jest --color\n        name: Run Test\n        env:\n          CI: true\n\n      - run: yarn build --log-pages\n        name: Build\n        env:\n          # incremental builds\n          # https://www.gatsbyjs.org/docs/page-build-optimizations-for-incremental-data-changes/\n          GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: true\n          NODE_ENV: production\n          ENVIRONMENT: ${{ contains(github.ref, \'master\') && \'production\' || \'staging\'}}\n          GATSBY_ALGOLIA_APP_ID: ${{ secrets.GATSBY_ALGOLIA_APP_ID }}\n          GATSBY_ALGOLIA_SEARCH_KEY: ${{ secrets.GATSBY_ALGOLIA_SEARCH_KEY }}\n          ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}\n          GATSBY_ALGOLIA_INDEX_NAME: ${{ secrets.GATSBY_ALGOLIA_INDEX_NAME }}\n\n      - name: Deploy to Netlify\n        uses: nwtgck/actions-netlify@v1.0\n        with:\n          publish-dir: \'./public\'\n          production-branch: master\n          deploy-message: \'Deploy from GitHub Actions\'\n        env:\n          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n```\n\n---\n\n## Results\n\nBefore I show you the benefits I had on my CI, I want to show you how awesome it‚Äôs even locally.\n\nWhen I remove both `.cache` and `public` folder:\n\n```txt\nDone building in 159.0597712 sec\n```\n\nThen if I run with the flag and ask to log, it‚Äôll be:\n\n```txt\ninfo Built pages:\nUpdated page: /offline-plugin-app-shell-fallback/\nUpdated page: /2020/03/dev-js-9\nUpdated page: /en/2020/03/yml-for-fe\nUpdated page: /\nUpdated page: /2019/04/things-i-dont-know-2018\nUpdated page: /2020/03/13/corona-virus-overview\nUpdated page: /2019/03/netlifiy-deploy\nUpdated page: /2018/09/dev-js-8\nUpdated page: /2018/07/it-and-english\nUpdated page: /2018/05/dev-js-7-2\nUpdated page: /2018/04/dev-js-7-1\nUpdated page: /2018/02/dev-js-5-1\nUpdated page: /2018/02/dev-js-5-2\nUpdated page: /2018/01/css-position\nUpdated page: /2018/02/dev-js-6\nUpdated page: /2018/01/dev-js-4\nUpdated page: /2018/01/dev-js-3-2\nUpdated page: /2017/12/dev-js-part-3\nUpdated page: /2017/12/dev-js-part-2\nUpdated page: /2017/12/dev-js-part-1\nUpdated page: /2017/09/deploy-fe-with-surge\nUpdated page: /2017/08/deploy-fe-with-gh-pages\nUpdated page: /2017/07/franz\nUpdated page: /2017/07/regex-part-7\nUpdated page: /2017/06/regex-part-6\nUpdated page: /2017/06/regex-part-5\nUpdated page: /2017/06/regex-part-4\nUpdated page: /2017/05/regex-part-3\nUpdated page: /2017/05/regex-part-2\nUpdated page: /2017/05/regex-part-1\nUpdated page: /2017\nUpdated page: /2018\nUpdated page: /2019\nUpdated page: /2020\nUpdated page: /2020/03\nUpdated page: /2019/03\nUpdated page: /2019/01\nUpdated page: /2018/09\nUpdated page: /2018/07\nUpdated page: /2018/05\nUpdated page: /2018/04\nUpdated page: /2018/02\nUpdated page: /2018/01\nUpdated page: /2017/12\nUpdated page: /2017/09\nUpdated page: /2017/08\nUpdated page: /2017/07\nUpdated page: /2017/06\nUpdated page: /2017/05\nUpdated page: /404/\nUpdated page: /search/\nUpdated page: /uses/\nUpdated page: /404.html\nDone in 23.01s.\n```\n\nThat‚Äôs nice but, what about the CI? Did it have some improvements?\n\nThe following image if from a PR opened by dependabot before I implement cache strategy + incremental builds:\n\n<Image src="https://res.cloudinary.com/duzei21zt/image/upload/v1597942390/site/cache_gatsby_github_actions_before_caching_53c4b8662c.png" width="1488" height="950" alt="cache-gatsby-github-actions-before-caching.png" />‚Äà\n\nThe next one is after implementing the strategy:\n\n<Image src="https://res.cloudinary.com/duzei21zt/image/upload/v1597942390/site/cache_gatsby_github_actions_after_caching_a1efa17632.png" width="1484" height="886" alt="cache-gatsby-github-actions-after-caching.png" />‚Äà\n\n---\n\n## Conclusion\n\nI‚Äôm still figuring out if there are some better strategies to do all this caching thingy, but I already can say that I‚Äôm pretty happy with the final results.\n\nI assume is that this feature is only at the beginning. Have you noticed that the flag has named with "EXPERIMENTAL"? As soon they get more and more builds and examples in different repos they will enhance this more and more.\n\nAnyways, I hope I could help you a bit in case you‚Äôre also having issues with that. You can find below all links from all resources I used and also the link to my project!\n\n---\n\n## Resources\n\n- [This blog repo](https://github.com/raulfdm/raulmelo.dev)\n- [Oficial feature announcement](https://www.gatsbyjs.org/blog/2020-04-22-announcing-incremental-builds/)\n- [Gatsby Incremental build documentation](https://www.gatsbyjs.org/docs/page-build-optimizations-for-incremental-data-changes/)\n- [JAM stack](https://jamstack.org/)\n- [Actions/cache](https://github.com/marketplace/actions/cache)\n\n\n',
        featured_image: {
          width: 1920,
          height: 889,
          url:
            'https://res.cloudinary.com/duzei21zt/image/upload/v1597942390/site/cache_gatsby_github_actions_featured_img_844a0fe924.png',
        },
      },
      {
        id: '5f3fa398d511c2380b097af0',
        title: 'YAML for Web Developers',
        subtitle: 'A small guide to help you write and read .yml files',
        date: '2020-03-19',
        locale: 'en',
        slug: 'yaml-for-web-developers',
        content:
          'More and more, we, web developers need to learn about different areas to become better professionals and less dependent on others for simple things.\n\nIf you start a career as FE, you might see a lot of `.yml` files like `.travis.yml` (for Travis Build), `.gitlab-ci.yml` (for git lab CI), etc. but, let\'s be honest, what the hell?\n\nWhy would people use this kind of file? What\'s the benefit of it? How does this thing work?\n\nSo, the goal of this article is to introduce you to the `YAML` structure and give you more confidence to understand, read, and change a file like this when you need it.\n\nAfter all, we tend to feel very uncomfortable and frustrated and we need to do something and we can\'t even understand what\'s that.\n\n---\n\n## But first, What is YAML?\n\nAccording to [the official website](https://yaml.org/), Yaml is:\n\n<BigQuote>\n  "YAML (a recursive acronym for "YAML Ain\'t Markup Language") is a\n  human-friendly data serialization standard for all programming languages."\n</BigQuote>\n\nHeavily used to write configuration files, which explains A LOT, right?\n\nPeople were tired to have a bunch of configs nobody could understand until someone just say:\n\n> What if we could somehow write our configuration like a "cake recipe"? I mean minimum bare text, very straight forward?\n\nBoom, in May 2001 Yaml was created.\n\n---\n\n## YAML vs JSON\n\nSurprisingly (or not really), Yaml is a superset of our well-known buddy JSON.\n\n> "Superset is A programming language that contains all the features of a given language and has been expanded or enhanced to include other features as well." - [Font](https://encyclopedia2.thefreedictionary.com/superset)\n\nIf I could give you a perspective of what it means I would say:\n\n> In a FE world, Yaml would matches for TypeScript while JSON for JavaScript\n\nTo better understand how this would be even possible let\'s see this example:\n\n```json:tsconfig.json\n{\n  "compilerOptions": {\n    "module": "system",\n    "noImplicitAny": true,\n    "removeComments": true,\n    "preserveConstEnums": true,\n    "outFile": "../../built/local/tsc.js",\n    "sourceMap": false,\n    "types": ["node", "lodash", "express"]\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "**/*.spec.ts"]\n}\n```\n\nThis is a `tsconfig.json` example. very easy to read, we can easily identify what\'s what but... it has some limitations, like:\n\n- Can\'t create variables;\n- Can\'t use external variables (e.g. environment variables)\n- Override values;\n\nIn JS world, if we can create a `.json` a configuration file, we almost always also can create a `.js` (like `.eslintrc` or `.eslint.js`) which allows us to mitigate the CONS mentioned before.\n\nBut then, if you\'re using other programing language, JS files isn\'t an option. And it\'s at this point Yaml starts to shine.\n\nIf we\'d have to re-write the `tsconfig.json` in `YAML` syntax and having the exactly result, it\'d be like:\n\n```yaml:tsconfig.yml\ncompilerOptions:\n  module: system\n  noImplicitAny: true\n  removeComments: true\n  preserveConstEnums: true\n  outFile: \'../../built/local/tsc.js\'\n  sourceMap: false\n  types:\n    - node\n    - lodash\n    - express\ninclude:\n  - src/**/*\nexclude:\n  - node_modules\n  - \'**/*.spec.ts\'\n```\n\n> Note this is only an example. You cannot write your `tsconfig` in YAML! üòú\n\nI hope you\'re starting to get the idea from these files.\n\n---\n\n## Concepts, Types, and Syntax\n\nNow, let\'s dive deep a bit in the concept of the language.\n\n### Indentation\n\n<!-- prettier-ignore -->\nIn Yaml, indentation **does matter**. It uses _whitespace indentation_ to nest information. By whitespace, keep in mind `tab` is not allowed.\n\nIf you\'re like me and uses tab for everything, install some plugin in your IDE to replace your tabs for spaces (like [editorconfig](https://editorconfig.org/)). Doing that, when you hit a tab, it\'ll automatically replace your tab by space and you don\'t even need to use your space bar! ;)\n\n### Root\n\nSince indentation matters here, if there\'s no space before the first declaration YAML will understand that\'s the root (level 0) of your file:\n\n```yml\nperson:\n  age: 20\n```\n\nLike we have in JSON with the first `{` curly brackets:\n\n```json{1}\n{\n  "person": {\n    "age": 20\n  }\n}\n```\n\n### Key/Value\n\nLike in JSON/JS, `YAML` also uses the `key/value` syntax and you can use in various ways:\n\n```yml\nkey: value\nkey_one: value one\nkey one: value # This works but it\'s weird\n\'my key\': somekey\n```\n\n### Comments\n\nTo write a comment you just have to use `#` followed by your message.\n\n```yml\n# I\'m a comment\nperson: # I\'m also a comment\n  age: 20\n```\n\nThis is cool to document some decision or make a note. Unfortunately, we can\'t do this with JSON.\n\n### Lists\n\nThere\'re 2 ways to write lists:\n\n#### JSON way: array of strings\n\nRemember Yaml is a JSON\'s superset? we can use its syntax:\n\n```yml\npeople: [\'Anne\', \'John\', \'Max\']\n```\n\n#### Hyphen syntax\n\nThe most common (and probably recommended)\n\n```yml\npeople:\n  - Anne\n  - John\n  - Max\n```\n\n### Strings\n\nThere\'re a few ways to declare a string in Yaml:\n\n<!-- prettier-ignore -->\n```yml\ncompany: Google # Single words, no quotes\nfull_name: John Foo Bar Doe # Full sentence, no quotes\nname: \'John\' # Using single quotes\nsurname: "Christian Meyer" # Using double quotes\n```\n\nWhile in JSON we would have only a way to use double quotes:\n\n```json\n{\n  "company": "Google",\n  "full_name": "John Foo Bar Doe",\n  "name": "John",\n  "surname": "Christian Meyer"\n}\n```\n\nAs a suggestion, prefer to use quotes when you want to use **any** special character like `_`, `@`, etc.\n\n### Numbers\n\nLike in any programming language, we have 2 types of number: Integer and Float:\n\n```yml\nyear: 2019 # Integer\nnodeVersion: 10.8 # Float\n```\n\n### Node Anchors (variables-ish)\n\nAn anchor is a mechanism to create a group of data (an object) that can be injected or extended from other objects.\n\nLet\'s imagine you need to create a configuration for your CI. It\'ll have both `production` and `staging` environments. As you can imagine, they share almost the same base settings.\n\nIn JSON world, we would have to duplicate these configs:\n\n```json\n{\n  "production": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": {\n      "ENVIRONMENT": "production"\n    }\n  },\n  "staging": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": {\n      "ENVIRONMENT": "staging"\n    }\n  }\n}\n```\n\nCopy and paste are also annoying, especially when you have to change something in all places it\'s been used those Infos.\n\nAnchors came to solve that problem. We can:\n\n1. First, create our anchor\n\n```yml{3}\n# I name it as "base-config" but it can be whatever\n# &base will be the "variable name" you\'ll use in the injection\nbase-config: &base\n  node_version: 13.0.0\n  os: ubuntu\n  package_manager: yarn\n  run:\n    - yarn install\n    - NODE_ENV=${ENVIRONMENT} yarn build\n```\n\n2. Then, injecting the anchor created in the level we want to have to see these values being injected:\n\n```yml{11,17}\nbase-config: &base\n  node_version: 13.0.0\n  os: ubuntu\n  package_manager: yarn\n  run:\n    - yarn install\n    - NODE_ENV=${ENVIRONMENT} yarn build\n\nproduction:\n  # I\'m injecting all "base" attributes and values inside production\n  <<: *base\n  env:\n    - ENVIRONMENT: production\n\nstaging:\n  # I\'m injecting all "base" attributes and values inside staging\n  <<: *base\n  env:\n    - ENVIRONMENT: staging\n```\n\nLooks simpler, right? And also easier to maintain.\n\nIf you copy this code and paste into a "Yaml to JSON converter" online tool you\'ll see the same code as I mentioned early in the JSON example but within the addition of the base config:\n\n```json{8-29}\n{\n  "base-config": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"]\n  },\n  "production": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": [\n      {\n        "ENVIRONMENT": "production"\n      }\n    ]\n  },\n  "staging": {\n    "node_version": "13.0.0",\n    "os": "ubuntu",\n    "package_manager": "yarn",\n    "run": ["yarn install", "NODE_ENV=${ENVIRONMENT} yarn build"],\n    "env": [\n      {\n        "ENVIRONMENT": "staging"\n      }\n    ]\n  }\n}\n```\n\n### JSON syntax (yes, JSON)\n\nAs explained before a superset of a language is the base language PLUS some extra features, which means we could write a `Yaml` file in JSON way\n\n<!-- prettier-ignore -->\n```yml\n{\n  "details": {\n    "company": {\n      "name": "Google",\n      "year": 2019,\n      "active": true\n    },\n    "employees": [\n      "Anne",\n      "John",\n      "Max"\n    ]\n  }\n}\n```\n\n> Doubting? Copy this code and paste [it here](https://onlineyamltools.com/convert-yaml-to-json)\n\nIf you convert this YAML to JSON, you\'ll have the same structure:\n\n```json\n{\n  "details": {\n    "company": {\n      "name": "Google",\n      "year": 2019,\n      "active": true\n    },\n    "employees": ["Anne", "John", "Max"]\n  }\n}\n```\n\n### Shell/Bash environment\n\nAs I told at the beginning of this article, it\'s very common `.yml` files are used as config files for many things, but especially for CI/CD environment.\n\nFor those, you\'ll have to describe how the machine/docker should work, what should be installed, ran, etc.\n\nCommonly, all those environments are Linux, which means you\'ll also have access to the environment itself.\n\nOn GitLab CI, for instance, you can specify on a global level environment variables you want to have available for the whole process:\n\n```yml{1-2,8}\nvariables:\n  NODE_IMAGE: node:10\n\nstages:\n  - build\n\ntest:\n  image: $NODE_IMAGE\n  stage: build\n```\n\nNote that the syntax to use variables by `$` isn\'t from YAML but `shell/bash`.\n\nWhat GitLab CI does is getting everything you\'d defined in `variables` and creates `shell` variables.\n\nSome other platforms also inject other values like commit ref, branch name, build time, author and also secret keys defined outside the configuration:\n\n```yml{11}\nvariables:\n  NODE_IMAGE: node:10\n\nstages:\n  - build\n\ntest:\n  image: $NODE_IMAGE\n  stage: build\n  artifacts:\n    name: $CI_COMMIT_REF_NAME\n```\n\nIn the example above, we\'re using a `$CI_COMMIT_REF_NAME` external environment variable that GitLab CI platform makes available which describes `The branch or tag name for which the project is built`.\n\n---\n\n## Conclusion\n\nI hope you now understand a bit more about YAML and at least feel comfortable reading and write your files.\n\nKeep in mind that what you\'ll have access to or not, the limitations will be determined by the platform you\'re using. Travis defines a different configuration than GitLab CI or CircleCI for example.\n\nAlways check the documentation from the platform you\'re working on to see what\'s possible or not to be done! :)\n\n---\n\n## References\n\n- [YAML Website](https://yaml.org/). (You can find parses for all languages there);\n- [Learn X in Y Minutes: YAML](https://learnxinyminutes.com/docs/yaml/): Here a whole guide/introduction about everything YAML can do for you;\n- [JSON ‚Üê‚Üí YAML Online converter](https://www.json2yaml.com/): Useful to visualize what generates what and create a better understanding;\n- [YAML by Wikipedia](https://en.wikipedia.org/wiki/YAML)\n',
        featured_image: {
          width: 2684,
          height: 1106,
          url:
            'https://res.cloudinary.com/duzei21zt/image/upload/v1598005862/site/yaml_para_desenvolvedores_web_featured_img_4c38d17c77.png',
        },
      },
    ],
  },
};
