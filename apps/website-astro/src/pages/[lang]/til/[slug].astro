---
import { domains, utils, SupportedLanguages } from '@raulmelo/core';
import Layout from '@/layouts/Layout.astro';
import { getIntl } from '@/infrastructure/i18n/getServerSideLocales.server';
import { ProseContainer } from '@raulmelo/ui';

import PostHeading from '@/ui/screens/blog/PostHeading.astro';
import Tags from '@/ui/Tags.astro';
import Tag from '@/ui/Tag.astro';
import { getTagUrl } from '@/infrastructure/utils/url';
import ShareContent from '@/ui/ShareContent.astro';
import PortableText from '@/ui/PortableText/PortableText.astro';

const { lang, slug } = Astro.params as {
  slug: string;
  lang: SupportedLanguages;
};

const til = await domains.posts.queryTilBySlug(slug);

// https://github.com/vercel/next.js/issues/16681#issuecomment-792314687
if (utils.isNil(til) || utils.isEmpty(til)) {
  return Astro.redirect('/404');
}

const estimatedReadingTime = utils.content.getEstimatedReadingTime(til.content);

const intl = getIntl(lang);

// TODO: add Missing SEO (get from the original set)
// const seoInfo = useMemo(() => {
//   const date = new Date(publishedAt).toISOString();

//   return {
//     title: title,
//     /**
//      * This enforce parsing double quotes correctly.
//      * - no parsing: "the description will be "like this""
//      * - parsing: "the description will be \"like this\""
//      */
//     description: `${description}`,
//     url: `${siteData.site.url}${asPath}`,
//     published: date,
//     modified: date,
//     image: {
//       url: featuredImage?.url ?? siteData.site.seoImage.url,
//       width: featuredImage?.width ?? siteData.site.seoImage.width,
//       height: featuredImage?.height ?? siteData.site.seoImage.height,
//     },
//   };
// }, [
//   title,
//   description,
//   featuredImage,
//   publishedAt,
//   asPath,
//   siteData.site.url,
// ]);
---

<Layout lang={lang} title={til.title}>
  <section class="w-full col-span-full lg:col-start-2 lg:col-end-12">
    <PostHeading
      title={til.title}
      publishedDateLabel={intl.formatMessage(
        {
          id: 'blogPost.publishedAt',
        },
        {
          publishedDate: til.publishedAt,
        },
      )}
      readingTimeLabel={intl.formatMessage(
        {
          id: 'blogPost.readingTime',
        },
        {
          publishedDate: til.publishedAt,
          readingTime: estimatedReadingTime,
        },
      )}
    />
    <ProseContainer class="mt-8">
      <PortableText value={til.content} />
    </ProseContainer>

    <hr class="mt-10 mb-6" />

    <footer class="flex flex-wrap justify-between">
      {
        til.tags ? (
          <div class="mb-4 mr-4">
            <span class="block mb-4 font-extrabold text-md md:text-lg lg:text-xl md:mb-6">
              Tags
            </span>
            <Tags>
              {til.tags.map((tag) => (
                <Tag class="text-base lg:text-lg">
                  <a
                    href={getTagUrl(tag.slug, lang)}
                    class="underline text-secondary"
                  >
                    #{tag.name}
                  </a>
                </Tag>
              ))}
            </Tags>
          </div>
        ) : null
      }

      <ShareContent
        titleLabel={intl.formatMessage({ id: 'blogPost.share' })}
        twitter={{ text: `TIL ${til.title}` }}
        linkedIn={{ title: til.title, summary: `TIL ${til.title}` }}
      />
    </footer>
  </section>
</Layout>
