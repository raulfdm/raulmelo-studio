---
import { type SupportedLanguages } from '@raulmelo/core/config';
import { queryTilBySlug, queryTils } from '@raulmelo/core/domains';
import { getEstimatedReadingTime, isEmpty, isNil } from '@raulmelo/core/utils';
import { ProseContainer } from '@raulmelo/ui';

import { getIntl } from '@/infrastructure/i18n/getServerSideLocales.server';
import { getTagUrl } from '@/infrastructure/utils/url';
import PostLayout from '@/ui/layouts/PostLayout.astro';
import PortableText from '@/ui/PortableText/PortableText.astro';
import PostHeading from '@/ui/PostHeading.astro';
import ShareContent from '@/ui/ShareContent.astro';
import Tag from '@/ui/Tag.astro';
import Tags from '@/ui/Tags.astro';

const { lang, slug } = Astro.params as {
  slug: string;
  lang: SupportedLanguages;
};

export async function getStaticPaths() {
  const tils = await queryTils(`all`);

  return tils.map((til) => ({
    params: {
      slug: til.slug,
      lang: til.language,
    },
  }));
}

export const prerender = true;

const til = await queryTilBySlug(slug);

// https://github.com/vercel/next.js/issues/16681#issuecomment-792314687
if (isNil(til) || isEmpty(til)) {
  return Astro.redirect(`/404`);
}

const estimatedReadingTime = getEstimatedReadingTime(til.content);

const intl = getIntl(lang);
---

<PostLayout
  title={til.title}
  seo={{
    description: til.title,
    article: {
      tags: til.tags?.map((tag) => tag.name) ?? [],
      modifiedTime: til.publishedAt,
      publishedTime: til.publishedAt,
    },
  }}
>
  <section class="w-full col-span-full lg:col-start-2 lg:col-end-12">
    <PostHeading
      title={til.title}
      publishedDateLabel={intl.formatMessage(
        {
          id: `blogPost.publishedAt`,
        },
        {
          publishedDate: intl.formatDate(new Date(til.publishedAt), {
            year: `numeric`,
            month: `short`,
            day: `2-digit`,
          }),
        },
      )}
      readingTimeLabel={intl.formatMessage(
        {
          id: `blogPost.readingTime`,
        },
        {
          publishedDate: til.publishedAt,
          readingTime: estimatedReadingTime,
        },
      )}
    />
    <ProseContainer class="mt-8">
      <PortableText value={til.content} />
    </ProseContainer>

    <hr class="mt-10 mb-6" />

    <footer class="flex flex-wrap justify-between">
      {
        til.tags ? (
          <div class="mb-4 mr-4">
            <span class="block mb-4 font-extrabold text-md md:text-lg lg:text-xl md:mb-6">
              Tags
            </span>
            <Tags>
              {til.tags.map((tag) => (
                <Tag class="text-base lg:text-lg">
                  <a
                    href={getTagUrl(tag.slug, lang)}
                    class="underline text-secondary"
                  >
                    #{tag.name}
                  </a>
                </Tag>
              ))}
            </Tags>
          </div>
        ) : null
      }

      <ShareContent
        titleLabel={intl.formatMessage({ id: `blogPost.share` })}
        twitter={{ text: `TIL ${til.title}` }}
        linkedIn={{ title: til.title, summary: `TIL ${til.title}` }}
      />
    </footer>
  </section>
</PostLayout>
