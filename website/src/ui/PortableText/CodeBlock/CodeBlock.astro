---
import '@raulmelo/code-highlight/styles';

import { highlight } from '@raulmelo/code-highlight';

import type { SupportedLanguage } from '@raulmelo/core/intl';
import { getIntl } from '@/infrastructure/i18n/getServerSideLocales.server';

import CodeBlockSvelte from './CodeBlock.svelte';

type Props = {
  node: {
    code: string;
    filename: string | null;
    highlightedLines: string | null;
    language: string | null;
    showLineNumbers: boolean | null;
  };
};

const {
  code,
  highlightedLines,
  language,
  filename,
  showLineNumbers = true,
} = Astro.props.node;
const { lang } = Astro.params as { lang: SupportedLanguage };

const intl = getIntl(lang);
---

{
  code && (
    <CodeBlockSvelte
      client:load
      code={code}
      codeHtml={highlight(code, {
        language: language ?? undefined,
        highlightedLines: highlightedLines ?? undefined,
      })}
      copyTitle={intl.formatMessage({ id: `blogPost.copyButton.title` })}
      filename={filename}
      showLineNumbers={Boolean(showLineNumbers)}
    />
  )
}

<!-- TODO: These global styles are not working well on svelte side. Have to investigate why. -->
<style is:global>
  @reference '../../styles/app.css';
  .line[data-highlight-line] {
    @apply bg-neutral-200 dark:bg-gray-700;
    @apply -mx-[var(--padding)] px-[var(--padding)];
  }

  :where(code.showLines) .line::before {
    content: attr(data-line-number);
    @apply font-code select-none text-right shrink-0 inline-block;
    @apply min-w-[calc(30px_+_var(--padding))] pr-[var(--padding)];
  }
</style>
